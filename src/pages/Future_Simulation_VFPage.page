<!-- created by: Aditya KaushalðŸ˜Ž
                 Meghna Goel
            2018-->
<apex:page docType="html-5.0" sidebar="false" controller="Future_Simulation_VFPage_ApexController" lightningStylesheets="true">
<apex:includeScript value="{!$Resource.Font_Open_Sans}"/>
<apex:stylesheet value="{!$Resource.future_simulation}"/>
    <apex:slds />
<apex:form >
<apex:includeScript value="{!$Resource.jqueryforDatePicker1}"/>
<apex:includeScript value="{!$Resource.jqueryforDatePicker2}"/>
<apex:includeScript value="{!$Resource.jquery_flot_js}"/>
<apex:includeScript value="{!$Resource.jquery_flot_stack_js}"/>
<script type="text/javascript">
$(document).ready(function(){                            
    //When you click on a link with class of poplight and the href starts with a # 
    $('a.poplight[href^=#]').click(function() {
        var popID = $(this).attr('rel'); //Get Popup Name
        var popURL = $(this).attr('href'); //Get Popup href to define size
                
        //Pull Query & Variables from href URL
        var query= popURL.split('?');
        var dim= query[1].split('&');
        var popWidth = dim[0].split('=')[1]; //Gets the first query string value

        //Fade in the Popup and add close button
        $('#' + popID).fadeIn().css({ 'width': Number( popWidth ) }).prepend('<a href="#" class="close"><img src="../resource/FinacastApp__popup_close" class="btn_close" title="Close Window" alt="Close" border="0" /></a>');
        
        //Define margin for center alignment (vertical + horizontal) - we add 80 to the height/width to accomodate for the padding + border width defined in the css
        var popMargTop = ($('#' + popID).height() + 80) / 2;
        var popMargLeft = ($('#' + popID).width() + 80) / 2;
        
        //Apply Margin to Popup
        $('#' + popID).css({ 
          'margin-top' : -popMargTop,
          'margin-left' : -popMargLeft
        });
        
        //Fade in Background
        $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
        $('#fade').css({'filter' : 'alpha(opacity=80)'}).fadeIn(); //Fade in the fade layer 
        return false;
    });    
    
    //Close Popups and Fade Layer
    $(document).on('click','a.close', function() { //When clicking on the close or fade layer...
        $('#fade , .popup_block').fadeOut(function() {
            $('#fade, a.close').remove();  
    }); //fade them both out
        
        return false;
    });
    
});

</script>
<script type="text/javascript">
$(document).ready(function(){      
    /* Jquery Tabs */
    var tabs = $('.tabs div.tabE');
    var hash = window.location.hash.replace("_tabE","");
    
    // On page load check for hash else show :first
    if($(hash).length != 0) {
        tabs.hide();
        $(hash).show();
        $('ul.tabmenu li.'+hash.replace(/#/,'')+' a').addClass('selected');
    } else {
        tabs.hide().filter('div:first').show();
        $('ul.tabmenu li:eq(0) a').addClass('selected');
    }

    $('ul.tabmenu a').click(function(e) {
        tabs.hide();
        tabs.filter(this.hash).show();
        
        $('ul.tabmenu a').removeClass('selected');
        $(this).addClass('selected');
        
        // Prefix with _tab to prevent browser jump on page load.
        window.location.hash = this.hash+'_tabE';
        
        $.cookie('tabE', this.hash+'_tabE');
        
        e.preventDefault();
    });
    $(".tabE").each(function(i){
        var totalSize = $(".tabE").size() - 1;
        if (i != totalSize) {
               $(this).append("<a href='#' class='next-tab mover'></a>");
        }
        if (i != 0) {
               $(this).append("<a href='#' class='prev-tab mover'></a>");
        }
    });

    $('.next-tab').click(function(){
      var tabE = $(this).parent();
      window.location.hash = "tabE" + parseInt(tabE[0].id.substring(3), 10) + 1 + "_tabE";
      $('ul.tabmenu a').removeClass('selected');
      $('ul.tabmenu li:eq('+(parseInt(tabE[0].id.substring(3), 10))+') a').addClass('selected');
      tabE.hide().next().show();
    });

    $('.prev-tab').click(function(){ 
      var tabE = $(this).parent();
      window.location.hash = "tabE" + parseInt(tabE[0].id.substring(3), 10) + 1 + "_tabE";
      //alert('prev=>'+(parseInt(tabE[0].id.substring(3), 10)));
      $('ul.tabmenu a').removeClass('selected');
          $('ul.tabmenu li:eq('+(parseInt(tabE[0].id.substring(3), 10) - 2)+') a').addClass('selected');
      tabE.hide().prev().show();

    });    

}); 
</script>

<script>
var offset;
var financialHealthOverlay;
var budgetAnalysisOverlay;
var finGraphYearCount = 4;
var budgetGraphYearCount = 3;
var goalGraphYearCount = 5;
var debtGraphYearCount = 5;
var currSymbol='$';
var site="US";
function initializeDiagnosis(){
    var diagnosisString = trim($('div#diagnosisJSONData').html());
$('div#diagnosisJSONData').remove();
diagnosis = JSON.parse(diagnosisString);
    //alert("initializeDiagnosis");
    offset = diagnosis.offset;
    showFinancialHealthGraph();
    showNetWorthData();
    if($("div#goalAnalysisDisplay").length > 0){
        showGoalGraph();
    }
    if($("div#debtAnalysis").length > 0){
        showDebtGraphDiagnosis();
    }
}

    /*ADIFUTURE*/
var currentDisplayScoreYear = 0;
function displayScore(decide){
    if(decide=='prev'){
        currentDisplayScoreYear--;
        if(currentDisplayScoreYear>=offset){
            $("#tafiScoreDisplayYear").html(currentDisplayScoreYear);
            for(var i=0;i<(diagnosis.financialHealthAnalysis.length || i<10);i++){
                if((offset+i)==currentDisplayScoreYear){
                    $("#yearTafiScore").html(parseFloat(diagnosis.financialHealthAnalysis[i].score).toFixed(1));
                    var marginTop=140-((parseFloat(diagnosis.financialHealthAnalysis[i].score).toFixed(0)*14));
                    $("div#scoreSlider").css('margin-top', marginTop+'px');
                    if(diagnosis.financialHealthAnalysis[i].months==0){  
                        $("div#tafiscorebackgounddiv").removeClass('mt-dashboardGreen-mounthsCountNetWorth');
                        $("div#tafiscorebackgounddiv").addClass('mt-dashboardOrange-mounthsCount');
                    }else{  
                        $("div#tafiscorebackgounddiv").removeClass('mt-dashboardOrange-mounthsCount');
                        $("div#tafiscorebackgounddiv").addClass('mt-dashboardGreen-mounthsCountNetWorth');
                    }
                    
                    showFinancialHealth (currentDisplayScoreYear);
                    highlightCircles(parseFloat(diagnosis.financialHealthAnalysis[i].score).toFixed(1));
                    break;
                }
            }   
        }else{
            alert("Sorry can not display previous year data");
            currentDisplayScoreYear++;
        }   
    }else if(decide=='next'){
        currentDisplayScoreYear++;
        if(currentDisplayScoreYear<=(offset+9)){
            $("#tafiScoreDisplayYear").html(currentDisplayScoreYear);
            for(var i=0;i<(diagnosis.financialHealthAnalysis.length || i<10);i++){
                if((offset+i)==currentDisplayScoreYear){
                    $("#yearTafiScore").html(parseFloat(diagnosis.financialHealthAnalysis[i].score).toFixed(1));
                    var marginTop=140-((parseFloat(diagnosis.financialHealthAnalysis[i].score).toFixed(0)*14));
                    $("div#scoreSlider").css('margin-top', marginTop+'px');
                    if(diagnosis.financialHealthAnalysis[i].months==0){  
                        $("div#tafiscorebackgounddiv").removeClass('mt-dashboardGreen-mounthsCountNetWorth');
                        $("div#tafiscorebackgounddiv").addClass('mt-dashboardOrange-mounthsCount');
                    }else{  
                        $("div#tafiscorebackgounddiv").removeClass('mt-dashboardOrange-mounthsCount');
                        $("div#tafiscorebackgounddiv").addClass('mt-dashboardGreen-mounthsCountNetWorth');
                    }
                    
                    showFinancialHealth (currentDisplayScoreYear);
                    highlightCircles(parseFloat(diagnosis.financialHealthAnalysis[i].score).toFixed(1));
                    break;
                }
            }
        }else{
            alert("Sorry can not display next year data");
            currentDisplayScoreYear--;
        }
    }   
}

function highlightCircles(tafiScore){
    $("#hhr").removeClass('mt-dark-red');
    $("#hho").removeClass('mt-dark-orange');
    $("#hhg").removeClass('mt-dark-green');
    $("#ccr").removeClass('mt-dark-red');
    $("#cco").removeClass('mt-dark-orange');
    $("#ccg").removeClass('mt-dark-green');
    $("#lor").removeClass('mt-dark-red');
    $("#loo").removeClass('mt-dark-orange');
    $("#log").removeClass('mt-dark-green');
    $("#gor").removeClass('mt-dark-red');
    $("#goo").removeClass('mt-dark-orange');
    $("#gog").removeClass('mt-dark-green');
    
    
    $("#hhr").addClass('mt-light-red');
    $("#hho").addClass('mt-light-orange');
    $("#hhg").addClass('mt-light-green');
    $("#ccr").addClass('mt-light-red');
    $("#cco").addClass('mt-light-orange');
    $("#ccg").addClass('mt-light-green');
    $("#lor").addClass('mt-light-red');
    $("#loo").addClass('mt-light-orange');
    $("#log").addClass('mt-light-green');
    $("#gor").addClass('mt-light-red');
    $("#goo").addClass('mt-light-orange');
    $("#gog").addClass('mt-light-green');
    if(parseFloat(tafiScore)<=0.0){
        $("#hhr").removeClass('mt-light-red');
        $("#ccr").removeClass('mt-light-red');
        $("#lor").removeClass('mt-light-red');
        $("#gor").removeClass('mt-light-red');
        
        $("#hhr").addClass('mt-dark-red');
        $("#ccr").addClass('mt-dark-red');
        $("#lor").addClass('mt-dark-red');
        //$("#gor").removeClass('mt-light-red');
        //$("#gor").addClass('mt-dark-red');
        //$("#tafiScoreDiv").css('margin-left','8px');
        //$("#tafiScoreDiv").css('color','#ff2424');
    }else if(parseFloat(tafiScore)>0.0 && parseFloat(tafiScore)<=0.5){
        $("#hho").removeClass('mt-light-orange');
        $("#ccr").removeClass('mt-light-red');
        $("#lor").removeClass('mt-light-red');
        
        $("#hho").addClass('mt-dark-orange');
        $("#ccr").addClass('mt-dark-red');
        $("#lor").addClass('mt-dark-red');
        //$("#gor").removeClass('mt-light-red');
        //$("#gor").addClass('mt-dark-red');
        //$("#tafiScoreDiv").css('margin-left','8px');
        //$("#tafiScoreDiv").css('color','#ff2424');
    }else if(parseFloat(tafiScore)>0.5 && parseFloat(tafiScore)<=0.75){
        $("#hhr").removeClass('mt-light-green');
        $("#ccg").removeClass('mt-light-green');
        $("#lor").removeClass('mt-light-red');
        
        $("#hhr").addClass('mt-dark-green');
        $("#ccg").addClass('mt-dark-green');
        $("#lor").addClass('mt-dark-red');
        //$("#gor").removeClass('mt-light-red');
        //$("#gor").addClass('mt-dark-red');
        //$("#tafiScoreDiv").css('margin-left','8px');
        //$("#tafiScoreDiv").css('color','#ff2424');
    }else if(parseFloat(tafiScore)>0.75 && parseFloat(tafiScore)<=2.5){
        $("#hhg").removeClass('mt-light-green');
        $("#ccg").removeClass('mt-light-green');
        $("#loo").removeClass('mt-light-orange');
        
        $("#hhg").addClass('mt-dark-green');
        $("#ccg").addClass('mt-dark-green');
        $("#loo").addClass('mt-dark-orange');
        //$("#gor").removeClass('mt-light-red');
        //$("#gor").addClass('mt-dark-red');
        //$("#tafiScoreDiv").css('margin-left','8px');
        //$("#tafiScoreDiv").css('color','#ff2424');
    }else if(parseFloat(tafiScore)>2.5 && parseFloat(tafiScore)<=4){
        $("#hhg").removeClass('mt-light-green');
        $("#ccg").removeClass('mt-light-green');
        $("#log").removeClass('mt-light-green');
        
        $("#hhg").addClass('mt-dark-green');
        $("#ccg").addClass('mt-dark-green');
        $("#log").addClass('mt-dark-green');    
        //$("#gor").removeClass('mt-light-red');
        //$("#gor").addClass('mt-dark-red');
        //$("#tafiScoreDiv").css('margin-left',(25*parseFloat(jsonObj.tafiScore).toFixed(1)-50)+'px');
        //$("#tafiScoreDiv").css('color','#ffa115');
    }else if(parseFloat(tafiScore)>4 && parseFloat(tafiScore)<=5){
        $("#hhg").removeClass('mt-light-green');
        $("#ccg").removeClass('mt-light-green');
        $("#log").removeClass('mt-light-green');
        
        $("#hhg").addClass('mt-dark-green');
        $("#ccg").addClass('mt-dark-green');
        $("#log").addClass('mt-dark-green');    
        
        //$("#goo").removeClass('mt-light-orange');
        //$("#goo").addClass('mt-dark-orange');
        //$("#tafiScoreDiv").css('margin-left',(25*parseFloat(jsonObj.tafiScore).toFixed(1)-50)+'px');
        //$("#tafiScoreDiv").css('color','#ffa115');
    }else{
        $("#hhg").removeClass('mt-light-green');
        $("#ccg").removeClass('mt-light-green');
        $("#log").removeClass('mt-light-green');
        
        $("#hhg").addClass('mt-dark-green');
        $("#ccg").addClass('mt-dark-green');
        $("#log").addClass('mt-dark-green');
        //$("#gog").removeClass('mt-light-green');
        //$("#gog").addClass('mt-dark-green');
        
        //$("#tafiScoreDiv").css('margin-left',(25*parseFloat(jsonObj.tafiScore).toFixed(1)-50)+'px');
        //$("#tafiScoreDiv").css('color','#15e015');
    }
    //alert()
    //alert("greenGoalMsgCounter=>"+greenGoalMsgCounter+" greenGoalMsg=>"+greenGoalMsg+"Negative=>"+goalArrNegative.length+" positive=>"+goalArrPositive.length+" flagAllMeet=>"+flagAllMeet);
    if(greenGoalMsgCounter>0 && greenGoalMsg){
        $("#gog").removeClass('mt-light-green');
        $("#gog").addClass('mt-dark-green');
    }else if(greenGoalMsgCounter>0 && !greenGoalMsg){
        $("#gor").removeClass('mt-light-red');
        $("#gor").addClass('mt-dark-red');
    }else{
        if(goalArrNegative.length>0 && goalArrPositive.length>0){
            $("#goo").removeClass('mt-light-orange');
            $("#goo").addClass('mt-dark-orange');
        }else if(goalArrNegative.length>0 && goalArrPositive.length==0){
            $("#gor").removeClass('mt-light-red');
            $("#gor").addClass('mt-dark-red');
        }else if(goalArrNegative.length==0 && flagAllMeet){
            $("#gog").removeClass('mt-light-green');
            $("#gog").addClass('mt-dark-green');
        }
    }   
}
function showFinancialHealthGraph(action){
    var scroller = $("div#financialHealthAnalysis div.graphScroller:first");
    index = scroller.attr('id');
    if(index == null || index == undefined || index == ""){
        index = 0;
    } else {
        index = parseInt(index);
        if(action == 0){
            index--;
        } else {
            index++;
        }
        if(index < 0 || index >= diagnosis.financialHealthAnalysis.length/finGraphYearCount){
            return;
        }
    }
    var dataSeries = new Array();
    var d1 = new Array();
    console.log('index'+ index);
    console.log('offset'+offset);
    for(var i=(index*finGraphYearCount); i<diagnosis.financialHealthAnalysis.length; i++){
        d1.push([(offset+i), diagnosis.financialHealthAnalysis[i].score]);
        console.log('d1'+d1);
    }

    /*dataSeries.push({data: d1, stack:0, lines: {steps: false}, shadowSize: 0});
    
    $.plot($("div#financialHealthAnalysis div.diagnosisFinancialHealthGraph:first"), 
        dataSeries, 
            {   colors: ["#52695C"],
                yaxis: {
                    autoscaleMargin: 1,
                    labelWidth: 50,
                    tickFormatter: function(val, axis){ return (parseFloat(val).toFixed(2));}
                },
                xaxis: {
                    tickDecimals: 0,
                    tickFormatter: function(val, axis){ return ('<span class="xAxisItem" onclick="showFinancialHealth('+val+');">'+val+'</span>');}
                },
                grid: {
                    show: true,
                    labelMargin: 5, // in pixels
                    borderWidth: 1, // in pixels
                    borderColor: "#545454"
                }
            }
    );
    $("div#financialHealthAnalysis div.graphScroller:first").find('span:first').html((offset+(index*finGraphYearCount)) + " to " + (offset+(index*finGraphYearCount)+finGraphYearCount-1))
    $("div#financialHealthAnalysis div.graphScroller:first").attr('id', index);*/
    $.plot($("#chart_div"),
            [{
                data: d1,
                label: "Finacast Score",
                color: "rgb(31,62,115)",
                hoverable: true
            }],
            {
            series: {
                lines: { show: true },
                points: { show: true }
            },
            legend: {
                show: false     
            },
            xaxis: {
                show: false
            },
            yaxis: {
                min:0,
                max:11,
                show: false
            },
            grid: {
                show: true,
                borderWidth: 0,
                markings: function (axes) {
                        var markings = [];
                        for (var x = Math.floor(axes.yaxis.min); x < axes.yaxis.max; x ++)
                            markings.push({ yaxis: { from: x, to: x-0.1  }, color:"#BBBBBB" });
                        return markings;
                    },
                hoverable: true
              } 

            
            });
    var displayYear='<div class="mt-year-heading" style="margin-left:0px"><ul>';
    var displayYear1='<div class="mt-year-heading" style="margin-left:0px"><ul>';
    for(var i=0;i<10;i++){
        if(i==0){
            displayYear+='<li style="padding-left:18px;">'+offset+'</li>';
            displayYear1+='<li style="padding-left:15px;">'+offset+'</li>';
        }else if(i==9){
            displayYear+='<li style="padding-left:18px;margin-right: 0;">'+(offset+i)+'</li>';
            displayYear1+='<li style="padding-left:20px;">'+(offset+i)+'</li>';
        }else{
            var tt=""+(i+offset);
            tt=tt.substring(2,tt.length);
            displayYear+='<li style="padding-left:18px;">\''+tt+'</li>';
            displayYear1+='<li style="padding-left:20px;">\''+tt+'</li>';
        }   
    }
    
    displayYear+='</ul></div>';
    displayYear1+='</ul></div>';
    currentDisplayScoreYear = diagnosis.offset
    $("div#tafiyeardisplaydiv").html(displayYear);
    $("div#debtanalysisdisplayyeardiagnosis").html(displayYear1);
    $("div#goaldisplayyeardiagnosis").html(displayYear1);
    $("div#networthyeardisplayscenarioCom").html(displayYear);
    $("#tafiScoreDisplayYear").html(currentDisplayScoreYear);   
    
    var marginTop=140-((parseFloat(diagnosis.financialHealthAnalysis[0].score).toFixed(0)*14));

    $("div#scoreSlider").css('margin-top', marginTop+'px');
    $("#yearTafiScore").html(parseFloat(diagnosis.financialHealthAnalysis[0].score).toFixed(1));
    $("div#chart_div").bind("plothover", function (event, pos, item) {
        if (item) {
            if (previousPoint != item.dataIndex) {
                previousPoint = item.dataIndex;
                $("#g1-tooltip").remove();
                var x = item.datapoint[0],
                y = item.datapoint[1].toFixed(1);
                //alert("y=>"+y);
                var y_offset = 0;
                if(y < 0)
                    y_offset = y * item.series.yaxis.scale + 5;
                var cont = '<div class=\"bubbleValues" style="height:7px;padding-top:8px">Finacast Score:' + y + '</div>';
                cont += '<div style="float:left;background-color: white;">&nbsp; </div><div class=\"bubbleValues\" style=\"float:left;\"></div>';
                showTooltip(item.pageX, item.pageY, y_offset,'<div class=\'toolTipLeft\'></div>'+
                '<div class=\'toolTipCenter\'>'+
                '<div class=\'toolTipTop\'></div>'+
                '<div class=\'toolTipCont\'>'+ cont +'</div>'+
                '<div class=\'toolTipBtm\'></div>'+
                '</div>'+
                '<div class=\'toolTipRight\'></div>');
            }
        }
        else {
            //$("#g1-tooltip").remove();
            previousPoint = null;            
        }
    });
    $("div#chart_div").bind("mouseout",function(){
        //alert("mouseout!!");
        previousPoint = null;
        $("#g1-tooltip").css("display","none"); 
    });
    showFinancialHealth((offset+(index*finGraphYearCount)));
}
var greenGoalMsg=false;
var greenGoalMsgCounter=-1;
function showFinancialHealth(year){
    var tafiScore = diagnosis.financialHealthAnalysis[year - offset];

    /*$('div#financialHealthAnalysis div#tafiScoreMessage').html('Projected Finacast Score <span style="color: #ff8e0d;">'+year+'</span>');
    $('div#financialHealthAnalysis div#tafiScoreSlider').css('marginLeft', (10+20*tafiScore.score));
    $('div#financialHealthAnalysis div#tafiScoreSlider').html((parseFloat(tafiScore.score).toFixed(2)));*/
    var messages = new Array();
    if(tafiScore.greenMessage != null && tafiScore.greenMessage != undefined){
        messages.push({type:0, message:tafiScore.greenMessage});
        //alert("Index in green=>"+(tafiScore.greenMessage.indexOf("goal")));
        if(tafiScore.greenMessage.indexOf("goal")>0){
            greenGoalMsg=true;
            greenGoalMsgCounter++;
        }
    }
    if(tafiScore.redMessage != null && tafiScore.redMessage != undefined){
        messages.push({type:1, message:tafiScore.redMessage});
        //alert("Index in red=>"+(tafiScore.redMessage.indexOf("goal")));
        if(tafiScore.redMessage.indexOf("goal")>0){
            greenGoalMsg=false;
            greenGoalMsgCounter++;
        }
    }
    if(tafiScore.surviveMessage != null && tafiScore.surviveMessage != undefined){
        messages.push({type:2, message:tafiScore.surviveMessage});
    }
    //alert(getCommonAlerts(messages)+" "+messages);
    $('div#tafimessages').html(getCommonAlerts(messages));
}
function showFinancialHealthDetail(){
    var year = parseInt(trim($('div#tafiScoreMessage span:first').html()));
    var tafiScoreElement = diagnosis.financialHealthAnalysis[year-offset];
    var tempItem;
    $("#financialHealth_overlay_div div.item-box-heading:first").html('Financial Health ('+year+')');
    $("#financialHealth_overlay_div div.diagnosisTable:first").html('Projected Finacast Score: '+(parseFloat(tafiScoreElement.score).toFixed(2)));
    
    tempItem = $('#financialHealth_overlay_div div.diagnosisTable[name="mustHaveExp"]').find('span');
    $(tempItem[1]).html((parseFloat(tafiScoreElement.mustHaveExp.mustHaveExpBudget).toFixed(2)));
    $(tempItem[2]).html((parseFloat(tafiScoreElement.mustHaveExp.mustHaveExpActual).toFixed(2)));
    
    tempItem = $('#financialHealth_overlay_div div.diagnosisTable[name="desiredExp"]').find('span');
    $(tempItem[1]).html((parseFloat(tafiScoreElement.desiredExp.desiredExpBudget).toFixed(2)));
    $(tempItem[2]).html((parseFloat(tafiScoreElement.desiredExp.desiredExpActual).toFixed(2)));
    
    tempItem = $('#financialHealth_overlay_div div.diagnosisTable[name="nonTermDebt"]').find('span');
    $(tempItem[1]).html((parseFloat(tafiScoreElement.nonTermDebt.nonTermDebtBudget).toFixed(2)));
    $(tempItem[2]).html((parseFloat(tafiScoreElement.nonTermDebt.nonTermDebtActual).toFixed(2)));
    
    tempItem = $('#financialHealth_overlay_div div.diagnosisTable[name="termDebt"]').find('span');
    $(tempItem[1]).html((parseFloat(tafiScoreElement.termDebt.termDebtBudget).toFixed(2)));
    $(tempItem[2]).html((parseFloat(tafiScoreElement.termDebt.termDebtActual).toFixed(2)));
    
    tempItem = $('#financialHealth_overlay_div div.diagnosisTable[name="goal"]').find('span');
    $(tempItem[1]).html((parseFloat(tafiScoreElement.goal.goalBudget).toFixed(2)));
    $(tempItem[2]).html((parseFloat(tafiScoreElement.goal.goalActual).toFixed(2)));
    
    financialHealthOverlay.load();
}


var currentDisplayNetworthYear;
var debtsArray=new Array();
var savingsArray=new Array();
var networthArray=new Array();
function showNetWorthData(){
    currentDisplayNetworthYear=offset;
    $("#networthAnalysisYear").html(currentDisplayNetworthYear);
    if(diagnosis != null && diagnosis != undefined){
        $('div#simulationDataMenu div.tafiProfileMenuItem').removeClass('tafiProfileMenuItemSelected');
        $('div#simulationDataMenu div[name="netWorth"]').addClass('tafiProfileMenuItemSelected');
        $('div#simulationData div.simulationDataBox').hide();
        $('div#simulationData div.simulationDataBoxBig').show();
        
        var dataSeries = new Array();
        var d1 = new Array();
        var d2 = new Array();
        var length;
        for(var i=0; i<diagnosis.netWorthAnalysis.yearlyData.length; i++){
            length = diagnosis.netWorthAnalysis.yearlyData[i].length;
            networthArray.push([diagnosis.netWorthAnalysis.yearlyData[i][length-1]]);
            d1.push([(offset+i-0.15), diagnosis.netWorthAnalysis.yearlyData[i][length-1]]);
        }
        console.log("networth",JSON.stringify(d1));        
        /*start*/
        var yearlysum=0;
    debtsArray=new Array();
    for(var i=0; i<(diagnosis.debtAnalysis.yearlyData.length); i++){
        tempArray = diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[(diagnosis.debtAnalysis.yearlyData[i].monthlyDebts.length - 1)];
        yearlysum=0;
        for(var j=0; j<tempArray.length; j++){
            yearlysum+=tempArray[j].item.currentValue;
        }
        debtsArray.push(yearlysum);
    }
    for(var i=0; i<(diagnosis.yearlySavings.length); i++){
        savingsArray.push(diagnosis.yearlySavings[i]);
    }
    
    
    var beginningProfileNetWorth = diagnosis.netWorthAnalysis.yearlyData[0][length-1];
    length = diagnosis.netWorthAnalysis.yearlyData[currentDisplayNetworthYear-offset].length;
    var profileNetWorth = diagnosis.netWorthAnalysis.yearlyData[currentDisplayNetworthYear-offset][length-1];
    htmlStringBuffer ="Your net worth for the year "+currentDisplayNetworthYear+" is " + currSymbol + parseFloat(networthArray[0]).formatMoney();

    $("#networthscenariomsg").html(htmlStringBuffer);
    $("#networthscenarioSavingAmt").val(parseFloat(savingsArray[0]).formatMoney());
    $("#networthscenarioDebtAmt").val(parseFloat(debtsArray[0]).formatMoney());
    $("#networthscenarioAmt").val(parseFloat(networthArray[0]).formatMoney());
    
    //alert("Networth saving=>"+$("#networthscenarioSavingAmt").val());
    $.plot($("div#scenarioNetWorth"), [{
        data: d1,
        color: "#AAA9A9",
        label: "Net Worth",
        highLightColor: "#AAA9A9"
    }], {
    series: {   
        bars: { show: true, fill: 1, barWidth: 0.5, fillColor: "#1F3E73" }
    },
    xaxis: {
        show: false     
    },
    yaxis: {
        show: true,
        position: "right",
//      tickSize: 1,
//      min:0,
//      max:500000,
//      ticks: 10,
        tickFormatter: function(num){
        if (num % 2 == 0 && num>1000){
            num *= num < 0? -1 : 1 ;
            return currSymbol +parseInt(num/1000)+"k";
        }else if(num % 2 == 0 && num<-1000){
            num *= num < 0? -1 : 1 ;
            return currSymbol +parseInt(num/1000)+"k";
        }else if(num % 2 == 0 && num>=-1000 && num<=-1000){
            num *= num < 0? -1 : 1 ;
            return currSymbol +num;
        }else
            return "";
        }
    },
    legend: {
        show: false     
    },
    grid: {
        show: true,
        borderWidth: 0,
        hoverable: true
      }
    });


    $("div#scenarioNetWorth").bind("plothover", function (event, pos, item) {
        if (item) {
            if (previousPointScenario != item.dataIndex) {
                previousPointScenario = item.dataIndex;
                $("#g1-tooltip").remove();
                var x = item.datapoint[0],
                y = item.datapoint[1].toFixed(1);
                
                /*for(var i=0;i<dataSeriesDebt.length;i++){
                    if(dataSeriesDebt[i].label==item.series.label){
                        //var vall=dataSeriesDebt[i].data[x-offset]+"";
                        //alert(vall.split(","));
                        //var arr = vall.split(",");
                        y = parseFloat(networthArray[i]).toFixed(1);
                        break;
                    }
                }*/

                var y_offset = 0;
                if(y < 0)
                    y_offset = y * item.series.yaxis.scale + 5;

        //alert(item.series.label+" "+(currSymbol + parseFloat(y).formatMoney()));
                var cont = '<div class=\"bubbleValues" style="height:7px">' +item.series.label + '</div>';
                cont += '<div class=\"bubbleValues" style="height:7px;padding-top:1px">' + currSymbol + parseFloat(y).formatMoney() + '</div>';
                cont += '<div style="float:left;background-color: white;">&nbsp; </div><div class=\"bubbleValues\" style=\"float:left;\"></div>';
                showTooltip(item.pageX, item.pageY, y_offset,'<div class=\'toolTipLeft\'></div>'+
                '<div class=\'toolTipCenter\'>'+
                '<div class=\'toolTipTop\'></div>'+
                '<div class=\'toolTipCont\'>'+ cont +'</div>'+
                '<div class=\'toolTipBtm\'></div>'+
                '</div>'+
                '<div class=\'toolTipRight\'></div>');
            }
        }
        else {
            //$("#g1-tooltip").remove();
            previousPointScenario = null;            
        }

    });
    $("div#scenarioNetWorth").bind("mouseout",function(){
        //alert("mouseout!!");
        previousPointScenario = null;
        $("#g1-tooltip").css("display","none"); 
    });    
        /*End*/
    }

}   





function displayNetworth(decide){
    var currentYear=currentDisplayNetworthYear;
    var analysisYearId="networthAnalysisYear";
    var savingAmtId="networthscenarioSavingAmt";
    var debtAmtId="networthscenarioDebtAmt";
    var networthAmtId="networthscenarioAmt";
    var msgId="networthscenariomsg";
    
    var objSavingArr=savingsArray;
    var objDebtArr=debtsArray;
    var objNetworthArr=networthArray;
    var objMainArr=diagnosis.netWorthAnalysis;

    if(decide=='prev'){
        currentYear--;
        if(currentYear==offset){
            $("#"+analysisYearId).html(currentYear);
            $("#"+savingAmtId).val(parseFloat(objSavingArr[currentYear-offset]).formatMoney());
            $("#"+debtAmtId).val(parseFloat(objDebtArr[currentYear-offset]).formatMoney());
            $("#"+networthAmtId).val(parseFloat(objNetworthArr[currentYear-offset]).formatMoney());
            var htmlStringBuffer ="Your net worth for the year "+currentYear+" is " + currSymbol +parseFloat(objNetworthArr[currentYear-offset]).formatMoney();
            $("#"+msgId).html(htmlStringBuffer);
            currentDisplayNetworthYear=currentYear;
        }else if(currentYear>=offset){
            currentDisplayNetworthYear=currentYear;
            $("#"+analysisYearId).html(currentYear);
            $("#"+savingAmtId).val(parseFloat(objSavingArr[currentYear-offset]).formatMoney());
            $("#"+debtAmtId).val(parseFloat(objDebtArr[currentYear-offset]).formatMoney());
            $("#"+networthAmtId).val(parseFloat(objNetworthArr[currentYear-offset]).formatMoney());
            length = objMainArr.yearlyData[0].length;
            var beginningProfileNetWorth = objMainArr.yearlyData[0][length-1];
            length = objMainArr.yearlyData[currentYear-offset].length;
            var profileNetWorth = objMainArr.yearlyData[currentYear-offset][length-1];
            var htmlStringBuffer ="";
            if(profileNetWorth > beginningProfileNetWorth){
                var profileNetWorthChange = profileNetWorth - beginningProfileNetWorth;
                var increasePercent=parseFloat((parseFloat(profileNetWorthChange)/parseFloat(beginningProfileNetWorth))*100).toFixed(2);
                if(increasePercent<0){
                    increasePercent=increasePercent*-1;
                }
                htmlStringBuffer+="Between "+offset+" and "+currentYear+" your net worth increases by " + currSymbol + profileNetWorthChange.formatMoney()+". This is a "+increasePercent+"% increase";
            }else{
                var profileNetWorthChange = beginningProfileNetWorth - profileNetWorth ;
                var decreasePercent=parseFloat((parseFloat(profileNetWorthChange)/parseFloat(beginningProfileNetWorth))*100).toFixed(2);
                if(decreasePercent<0){
                    decreasePercent=decreasePercent*-1;
                }
                htmlStringBuffer+="Between "+offset+" and "+currentYear+" your net worth decrease by "+ currSymbol + profileNetWorthChange.formatMoney()+". This is a "+decreasePercent+"% decrease";
            }
            $("#"+msgId).html(htmlStringBuffer);
        }else{
            alert("Sorry can not display previous year data");
        }   
    }else if(decide=='next'){
        currentYear++;
        if(currentYear==offset){
            $("#"+analysisYearId).html(currentYear);
            $("#"+savingAmtId).val(parseFloat(objSavingArr[currentYear-offset]).formatMoney());
            $("#"+debtAmtId).val(parseFloat(objDebtArr[currentYear-offset]).formatMoney());
            $("#"+networthAmtId).val(parseFloat(objNetworthArr[currentYear-offset]).formatMoney());
            var htmlStringBuffer ="Your net worth for the year "+currentYear+" is " + currSymbol +parseFloat(objNetworthArr[currentYear-offset]).formatMoney();
            $("#"+msgId).html(htmlStringBuffer);
            currentDisplayNetworthYear=currentYear;
            
        }else if(currentDisplayNetworthYear<=(offset+9)){
            currentDisplayNetworthYear=currentYear;
            length = objMainArr.yearlyData[0].length;
            var beginningProfileNetWorth = objMainArr.yearlyData[0][length-1];
            length = objMainArr.yearlyData[currentYear-offset].length;
            var profileNetWorth = objMainArr.yearlyData[currentYear-offset][length-1];
            var htmlStringBuffer ="";
            //alert("profileNetWorthChange=>"+profileNetWorthChange +" profileNetWorth=>"+ profileNetWorth +" beginningProfileNetWorth=>"+beginningProfileNetWorth);

            var htmlStringBuffer ="";
            if(profileNetWorth > beginningProfileNetWorth){
                var profileNetWorthChange = profileNetWorth - beginningProfileNetWorth;
                var increasePercent=parseFloat((parseFloat(profileNetWorthChange)/parseFloat(beginningProfileNetWorth))*100).toFixed(2);
                if(increasePercent<0){
                    increasePercent=increasePercent*-1;
                }
                htmlStringBuffer+="Between "+offset+" and "+currentYear+" your net worth increases by "+ currSymbol +profileNetWorthChange.formatMoney()+". This is a "+increasePercent+"% increase";
            }else{
                var profileNetWorthChange = beginningProfileNetWorth - profileNetWorth ;
                var decreasePercent=parseFloat((parseFloat(beginningProfileNetWorth)/parseFloat(beginningProfileNetWorth))*100).toFixed(2);
                if(decreasePercent<0){
                    decreasePercent=decreasePercent*-1;
                }
                htmlStringBuffer+="Between "+offset+" and "+currentYear+" your net worth decrease by "+ currSymbol +profileNetWorthChange.formatMoney()+". This is a "+decreasePercent+"% decrease";
            }
            
            $("#"+msgId).html(htmlStringBuffer);
            $("#"+analysisYearId).html(currentYear);
            $("#"+savingAmtId).val(parseFloat(objSavingArr[currentYear-offset]).formatMoney());
            $("#"+debtAmtId).val(parseFloat(objDebtArr[currentYear-offset]).formatMoney());
            $("#"+networthAmtId).val(parseFloat(objNetworthArr[currentYear-offset]).formatMoney());
        }else{
            alert("Sorry can not display next year data");
        }
    }
}




Number.prototype.formatMoney = function(c, d, t){
    if(site=="US"){
        var n = this, c = isNaN(c = Math.abs(c)) ? 2 : c, d = d == undefined ? "." : d, t = t == undefined ? "," : t, s = n < 0 ? "-" : "", i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", j = (j = i.length) > 3 ? j % 3 : 0;
       return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) ;
    }else{
        var n = this, c = isNaN(c = Math.abs(c)) ? 2 : c, d = d == undefined ? "." : d, t = t == undefined ? "," : t, s = n < 0 ? "-" : "", i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", j = (j = i.length) > 3 ? j % 3 : 0;
        //alert(i);
        //var ret=s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{2})(?=\d)/g, "$1" + t);
         i += '';
         x = i.split('.');
         x1 = x[0];
         x2 = x.length > 1 ? '.' + x[1] : '';
         var rgx = /(\d+)(\d{3})/;
         var z = 0;
         var len = String(x1).length;
         var num = parseInt((len/2)-1);
     
          while (rgx.test(x1))
          {
            if(z > 0)
            {
              x1 = x1.replace(rgx, '$1' + ',' + '$2');
            }
            else
            {
              x1 = x1.replace(rgx, '$1' + ',' + '$2');
              rgx = /(\d+)(\d{2})/;
            }
            z++;
            num--;
            if(num == 0)
            {
              break;
            }
          }
         return x1 + x2;
    }
};
function showTooltip(x, y, y_offset, contents) {
    $('<div id="g1-tooltip"><div id="g1-tip-content">'+ contents +'</div></div>').css( {
    position: 'absolute',
    display: 'none',
    top: y-55 + y_offset,
    left: x+3,
    height: '52px'
    }).appendTo("body").fadeIn(100);
}
function showBudgetAnalysis(year){
    if(year == null || year == undefined){
        year = parseInt(trim($('div#budgetAnalysis div.item-box-heading:first').find('span:first').html()));
    }
    var budgetItem = diagnosis.budgetAnalysis.yearlyData[year-offset];
    var messages = new Array();

    if((budgetItem.beginBalance + budgetItem.cashIn - budgetItem.cashOut) > 0){
        messages.push({type:0, message:"Your total savings at the end of the year "+year+" can be increased by "+ currSymbol +(0.1*(budgetItem.mustHaveExp+budgetItem.desiredExp)).toFixed(2)+" if you cut down your expenses for the year by 10%"});
        messages.push({type:2, message:"You will have total savings of "+ currSymbol +(budgetItem.beginBalance + budgetItem.cashIn - budgetItem.cashOut).toFixed(2)+" at the end of "+year+" after meeting all your expenses and  debt payments."});
    } else {
        messages.push({type:2, message:"You will have a net negative balance at the end of the year if you take care of all your expenses, and debt commitments . This means you are likely to go in further debt by " + currSymbol + (budgetItem.cashOut-(budgetItem.beginBalance + budgetItem.cashIn)).toFixed(2)})
    }
    $('div#savinganalysismessages').html(getCommonAlerts(messages));
    //$('div#budgetAnalysis div.diagnosisCommonAlerts').html(getCommonAlerts(messages));
    //$('div#budgetAnalysis div.item-box-heading').html('Budget Analysis <span style="color: #ff8e0d;">'+(year)+'</span>');
}
function showBudgetAnalysisDetail(year){
    if(year == null || year == undefined){
        year = parseInt(trim($('div#budgetAnalysis div.item-box-heading:first').find('span:first').html()));
    }
    var budgetElement = diagnosis.budgetAnalysis.yearlyData[year-offset];
    var tempItem;
    $("#budgetAnalysis_overlay_div div.item-box-heading:first").html('Budget Analysis ('+year+')');
    
    tempItem = $('#budgetAnalysis_overlay_div div.diagnosisTableHeaderMain');
    $(tempItem[0]).html("Net Cash In: "+ currSymbol +(parseFloat(budgetElement.cashIn).toFixed(2)));
    $(tempItem[1]).html("Net Cash Out: "+ currSymbol +(parseFloat(budgetElement.cashOut).toFixed(2)));
    
    tempItem = $('#budgetAnalysis_overlay_div div.diagnosisTable[name="income"]').find('span:last').html((parseFloat(budgetElement.income).toFixed(2)));
    tempItem = $('#budgetAnalysis_overlay_div div.diagnosisTable[name="interestIncome"]').find('span:last').html((parseFloat(budgetElement.interestIncome).toFixed(2)));
    tempItem = $('#budgetAnalysis_overlay_div div.diagnosisTable[name="previousYearTaxBenefits"]').find('span:last').html((parseFloat(budgetElement.previousYearTaxBenefits).toFixed(2)));
    
    tempItem = $('#budgetAnalysis_overlay_div div.diagnosisTable[name="mustHaveExp"]').find('span:last').html((parseFloat(budgetElement.mustHaveExp).toFixed(2)));
    tempItem = $('#budgetAnalysis_overlay_div div.diagnosisTable[name="desiredExp"]').find('span:last').html((parseFloat(budgetElement.desiredExp).toFixed(2)));
    tempItem = $('#budgetAnalysis_overlay_div div.diagnosisTable[name="nonTermDebtSum"]').find('span:last').html((parseFloat(budgetElement.nonTermDebtSum).toFixed(2)));
    tempItem = $('#budgetAnalysis_overlay_div div.diagnosisTable[name="termDebtSum"]').find('span:last').html((parseFloat(budgetElement.termDebtSum).toFixed(2)));
    
    var messages = new Array();
    if(budgetElement.cashIn > budgetElement.cashOut){
        messages.push({type:0, message:"Your net cash in exceeds your net cash out by "+ currSymbol +((parseFloat((budgetElement.cashIn - budgetElement.cashOut)).toFixed(2)))});
    } else if(budgetElement.cashIn < budgetElement.cashOut) {

        messages.push({type:1, message:"Your net cash out exceeds your net cash in by "+ currSymbol +((parseFloat((budgetElement.cashOut - budgetElement.cashIn)).toFixed(2)))});
    }
    $('div#budgetAnalysis_overlay_div div.diagnosisCommonAlerts').html(getCommonAlerts(messages));
    budgetAnalysisOverlay.load();
}
var goalAnalysisYear=0;

var dataSeriesGoal = new Array();
function showGoalGraph(action){
    var scroller = $("div#goalAnalysis div.graphScroller:first");
    index = scroller.attr('id');
    if(index == null || index == undefined || index == ""){
        index = 0;
    } else {
        index = parseInt(index);
        if(action == 0){
            index--;
        } else {
            index++;
        }
        if(index < 0 || index >= diagnosis.goalAnalysis.yearlyData.length/goalGraphYearCount){
            return;
        }
    }
    console.log("Index" + index);
    console.log("goalGraphYearCount" + goalGraphYearCount);
    goalAnalysisYear=offset;
    var d1 = new Array();
    var flag = true;
    var tempArray;
    if(diagnosis.goalAnalysis.yearlyData.length == 1){
        var offset2 = diagnosis.goalAnalysis.yearlyData[0].offset;
        for(var i=0; i<diagnosis.goalAnalysis.yearlyData[0].monthlyGoals.length; i++){
            tempArray = diagnosis.goalAnalysis.yearlyData[0].monthlyGoals[i];
            for(var j=0; j<tempArray.length; j++){
                for(var k=0; k<dataSeriesGoal.length; k++){
                    if(tempArray[j].name == dataSeriesGoal[k].label){
                        dataSeriesGoal[k].data.push([(offset2+i), tempArray[j].value]);
                        flag = false;
                        break;
                    }
                }
                if(flag){
                    d1 = new Array();
                    d1.push([(offset2+i), tempArray[j].value]);
                    dataSeriesGoal.push({data: d1, bars: {barWidth: 0.6, align:"center", show:true}, stack:true, shadowSize: 0, label: tempArray[j].name});
                }
                flag = true;
            }
        }
    } else {
        for(var i=(index*goalGraphYearCount); i<diagnosis.goalAnalysis.yearlyData.length; i++){
            tempArray = diagnosis.goalAnalysis.yearlyData[i].yearlyGoals;
            
            for(var j=0; j<tempArray.length; j++){
                for(var k=0; k<dataSeriesGoal.length; k++){
                    if(tempArray[j].name == dataSeriesGoal[k].label){
                        dataSeriesGoal[k].data.push([(offset+i), tempArray[j].value]);
                        flag = false;
                        break;
                    }
                }
                if(flag){
                    d1 = new Array();
                    d1.push([(offset+i), tempArray[j].value]);
                    dataSeriesGoal.push({data: d1, bars: {barWidth: 0.6, align:"center", show:true}, stack:true, shadowSize: 0, label: tempArray[j].name});
                }
                flag = true;
            }
        }
    }
    /*$.plot($("#graph-4"),
            dataSeries, {
            series: {
                stack: true,
                bars: { show: true,fill:1, barWidth: 0.5}
            },
            xaxis: {
                show: false     
            },
            yaxis: {
                show: true,
                position: "right",
//              tickSize: 1,
//              min:0,
//              max:12,
//              ticks: 10,
                tickFormatter: function(num){
                            if (num != 0 && num % 2 == 0 )
                                return  currSymbol + num/1000;
                            else
                                return "";
                }
            },
            legend: {
                show: true
            },
            grid: {
                show: true,
                borderWidth: 0,
                hoverable: true
              }
        });*/
    
    for(var kh=0;kh<(1 || dataSeriesGoal.length);kh++){
        if(dataSeriesGoal[kh].data.length<10){
            for (var j=dataSeriesGoal[kh].data.length;j<10;j++){
                var d1=new Array();
                d1 = new Array();
                dataSeriesGoal[kh].data.push([(offset+j), parseInt(0)]);
            }
        }
        //alert("after=>"+dataSeriesGoal[kh].data.length);
    }
    $.plot($("div#graph-4"), 
            dataSeriesGoal, 
            {   yaxis: {
        position: "right",
                    labelWidth: 30,
                    tickFormatter: function(num){
                    if (num != 0 && num % 2 == 0 )
                    {
                        if(num>1000){
                            return  currSymbol + (num/1000).toFixed(0)+"k";
                        }else if(num<-1000){
                            return  currSymbol + (num/1000).toFixed(0)+"k";
                        }else{
                            return  currSymbol + num;
                        }
                    }else
                        return "";
                    }
                },
                xaxis: {
                    show:false
                },
                legend: {
                    show: false
                },
                grid: {
                    show: true,
                    labelMargin: 5, // in pixels
                    borderWidth: 0, // in pixels
                    hoverable:true
                }
            }
    );
    $("div#graph-4").bind("plothover", function (event, pos, item) {
        if (item) {
            if (previousPoint != item.dataIndex) {
                previousPoint = item.dataIndex;
                $("#g1-tooltip").remove();
                var x = item.datapoint[0],
                y = item.datapoint[1].toFixed(1);
                
                
                for(var i=0;i<dataSeriesGoal.length;i++){
                    //alert(dataSeriesDebt[i].label);
                    if(dataSeriesGoal[i].label==item.series.label){
                        var vall=dataSeriesGoal[i].data[x-offset]+"";
                        var arr = vall.split(",");
                        y = parseFloat(arr[1]).toFixed(1);
                        break;
                    }
                }
                
                var y_offset = 0;
                if(y < 0)
                    y_offset = y * item.series.yaxis.scale + 5;
                var cont = '<div class=\"bubbleValues" style="height:7px;">' + item.series.label + '</div>';
                cont += '<div class=\"bubbleValues" style="height:7px;padding-top:1px">' + currSymbol + parseFloat(y).formatMoney() + '</div>';
                cont += '<div style="float:left;background-color: white;">&nbsp; </div><div class=\"bubbleValues\" style=\"float:left;\"></div>';
                showTooltip(item.pageX, item.pageY, y_offset,'<div class=\'toolTipLeft\'></div>'+
                '<div class=\'toolTipCenter\'>'+
                '<div class=\'toolTipTop\'></div>'+
                '<div class=\'toolTipCont\'>'+ cont +'</div>'+
                '<div class=\'toolTipBtm\'></div>'+
                '</div>'+
                '<div class=\'toolTipRight\'></div>');
            }
        }
        else {
            //$("#g1-tooltip").remove();
            previousPoint = null;            
        }
    });
    $("div#graph-4").bind("mouseout",function(){
        //alert("mouseout!!");
        previousPoint = null;
        $("#g1-tooltip").css("display","none"); 
    });
    //$("div#goalAnalysis div.graphScroller:first").find('span:first').html((offset+(index*goalGraphYearCount)) + " to " + (offset+(index*goalGraphYearCount)+goalGraphYearCount-1))
    //$("div#goalAnalysis div.graphScroller:first").attr('id', index);
    showGoalAnalysisMine();
}
var flagAllMeet=true;
var goalArrPositive=new Array();
var goalArrNegative=new Array();
function showGoalAnalysisMine(){
    //alert("show goal analysis "+diagnosis.goalAnalysis.yearlyData.length);
    
    for (var kh=0;kh<diagnosis.goalAnalysis.yearlyData.length;kh++){
        var elem=diagnosis.goalAnalysis.yearlyData[kh];
        //alert(elem.yearlyGoals.length+" kh=>"+kh);
            for(var ss=0; ss<elem.yearlyGoals.length; ss++){
                var item = [];
                item = elem.yearlyGoals[ss];
                //alert("In loop "+elem.yearlyGoals.length+" for year=>"+(kh+offset)+" name=>"+item.name+" ss=>"+ss);
                //alert(item.name+" "+item.targetDate+" current year=>"+(kh+offset));
                var dateMY=item.targetDate.split("/");

                //alert((kh+offset)+" == "+dateMY[1]+" for item=>"+item.name);
                if((kh+offset)==dateMY[1] || (((kh+offset)==(dateMY[1]-1)) && (dateMY[0]==1))){
                    if(item.onTrack==1){
                        goalArrPositive.push(item.name+","+dateMY[0]+","+dateMY[1]);
                    }else if(item.onTrack==0){
                        flagAllMeet=false;
                        goalArrNegative.push(item.name);
                    }
                }
                if(kh==(diagnosis.goalAnalysis.yearlyData.length-1) && (dateMY[1]>(kh+offset))){
                    if(item.onTrack==1){
                        goalArrPositive.push(item.name+","+dateMY[0]+","+dateMY[1]);
                    }else if(item.onTrack==0){
                        flagAllMeet=false;
                        goalArrNegative.push(item.name);
                    }
                }
            }   
    }
    //alert("goalArrPositive.length=>"+goalArrPositive.length+" goalArrNegative.length=>"+goalArrNegative.length+" flagAllMeet=>"+flagAllMeet);
    var msg="";
    if(flagAllMeet){
        msg="You will have all goals on target at the end of "+(diagnosis.goalAnalysis.yearlyData.length+offset);
    }else{
        var pos="";
        var neg="";
        for (var kh=0;kh<goalArrPositive.length;kh++){
            var arr=goalArrPositive[kh].split(",");
            pos+="Goal "+arr[0]+" will be met in "+arr[1]+","+arr[2];
            if(kh<(goalArrPositive.length-1)){
                pos+=",";
            }
        }
        
        for (var kh=0;kh<goalArrNegative.length;kh++){
            neg+="Goal "+goalArrNegative[kh];
            if(kh<(goalArrNegative.length-1)){
                neg+=",";
            }
        }
        if(goalArrPositive.length>0){
            msg+='<div class="diagnosisGreenAlert"><span style="margin-right: 3px;color:#499B4F">&#10004;</span><span style="width: 400px;color:#299B00">'+pos+'</span></div>';
        }   
        if(goalArrNegative.length>0){
            msg+='<div class="diagnosisRedAlert"><span style="margin-right: 3px;">X</span><span style="width: 400px;">'+neg+' will not be met on time</span></div>';
        }
    }
    highlightCircles(parseFloat(diagnosis.financialHealthAnalysis[0].score).toFixed(1));
    //alert("final msg=>"+msg);
    $('div#gaolsAnalysisMsg').html(msg);
    //alert("from div=>"+$('div#gaolsAnalysisMsg').html());
}

function showGoalAnalysis(year){
    if(year == null || year == undefined){
        year = parseInt(trim($('div#goalAnalysis div.item-box-heading:first').find('span:first').html()));
    }
    $("#goalDisplayYear").html(goalAnalysisYear);
    //goalAnalysisYearalert(diagnosis.goalAnalysis.yearlyData.length+" "+offset);
    var element = diagnosis.goalAnalysis.yearlyData[year-offset];
    var item;
    var messages = new Array();
    var pFlag = 0;
    var nFlag = 0;
    var htmlStringBuffer="";
    htmlStringBuffer+='<div style="color: #FFFFFF;" class="diagnosisTable diagnosisTableHeader"><span style="width: 200px;">Goal Name</span>';
    htmlStringBuffer+='<span style="width: 100px;">On Track</span><span style="width: 110px;">Target Amount</span></div>';
                    
    var p="You will be able to meet your goals: ", n="You will not be able to meet your goal: ", pp = "", nn = "";
    for(var i=0; i<element.yearlyGoals.length; i++){
        item = element.yearlyGoals[i];
        if(1%2 == 0){
            htmlStringBuffer+='<div class="diagnosisTable"><span style="width: 200px;">';
        } else {
            htmlStringBuffer+='<div class="diagnosisTable diagnosisTabletAlt"><span style="width: 200px;">';
        }
        if(item.onTrack == 1){
            pFlag++;
            if(pp != ""){
                p+=(pp + ", ");
            }
            pp = item.name;
            htmlStringBuffer+=(item.name) + '</span><span style="width: 100px;">&#10004;';
        } else if(item.onTrack == 0){
            nFlag++;
            if(nn != ""){
                n+=(nn + ", ");
            }
            nn = item.name;
            htmlStringBuffer+=(item.name) + '</span><span style="width: 100px; color: red;">X';
        }
        htmlStringBuffer+='</span><span style="width: 110px;">'+(item.targetAmount)+'</span></div>';
                        
    }
    p = p.substring(0, p.length-2);
    n = n.substring(0, n.length-2);
    if(pFlag > 0){
        if(pFlag > 1){
            p += (" and " + pp + " in time."); 
        } else {
            p += (" " + pp + " in time."); 
        }
        messages.push({type:0, message:p});
    }
    if(nFlag > 0){
        if(nFlag > 1){
            n += (" and " + nn + " in time."); 
        } else {
            n += (" " + nn + " in time."); 
        }
        messages.push({type:1, message:n});
    }
    if((pFlag+nFlag)>0){
        if(element.extraContri > 0){
            if(element.extraContri <= (0.3 * element.expenses)){
                htmlStringBuffer+='<div class="diagnosisGreenAlert">Increasing your goal contribution by' + currSymbol +parseFloat(element.extraContri).toFixed(2)+' will result in keeping your goals on target. This can be achieved by reducing your expenses by '+((element.extraContri*100)/element.expenses).toFixed(2)+'%</div>';
            } else {
                var value = 0.3 * element.expenses;
                var count = 0;
                for(var i=0; i<element.yearlyGoals.length; i++){
                    item = element.yearlyGoals[i];
                    if(value > item.extraContri){
                        value -= item.extraContri;
                        count++;
                    }
                }
                if(count > 0){
                    htmlStringBuffer+='<div class="diagnosisGreenAlert">Increasing your goal contribution by '+ currSymbol +(element.expenses - value).toFixed(2)+' will result in keeping '+count+' of your goals on target. This can be achieved by reducing your expenses by '+(((element.expenses - value)*100)/element.expenses).toFixed(2)+'%</div>';
                }
            }
        }
        $('div#goalAnalysis div.diagnosisCommonAlerts2').html(htmlStringBuffer);
    }
    //alert(year);
    $('div#gaolsAnalysisMsg').html('<div style="width:100%;float:left">Goal Analysis <span style="color: #ff8e0d;">'+(year)+'</span></div>'+getCommonAlerts(messages));
    //$('div#goalAnalysis div.item-box-heading').html();
}

var currentDebtsAnalysisYear=0;
var shortTermYearlyInterest=new Array();
var loanPayOffYear=0;
var flagAllLoanPayedOnTime=true;
var dataSeriesDebt = new Array();
function showDebtGraphDiagnosis(action){
    dataSeriesDebt = new Array();
    var scroller = $("div#debtAnalysis div.graphScroller:first");
    index = scroller.attr('id');
    if(index == null || index == undefined || index == ""){
        index = 0;
    } else {
        index = parseInt(index);
        if(action == 0){
            index--;
        } else if (action == 1){
            index++;
        }
        if(index < 0 || index >= diagnosis.debtAnalysis.yearlyData.length/debtGraphYearCount){
            index = 0;
        }
    }
    currentDebtsAnalysisYear=offset;
    var selected = $("div#debtAnalysis select:first").val();
    if(selected == null || selected == undefined || trim(selected) == ""){
        selected = 'All';
    } else {
        selected = trim(selected);
    }

    
    var debtList = new Array();
    var debtList2 = new Array();
    var d1 = new Array();
    
    var flag = true;
    var tempArray;
    var startYear = index*debtGraphYearCount;
    console.log("Start Year: " + startYear);
    var endYear = -1;
    
    for(var i=startYear; i<diagnosis.debtAnalysis.yearlyData.length; i++){
        
        shortTermYearlyInterest[i]=diagnosis.debtAnalysis.yearlyData[i].interestOnDebt;
        tempArray = diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[(diagnosis.debtAnalysis.yearlyData[i].monthlyDebts.length - 1)];
        for(var j=0; j<tempArray.length; j++){
            for(var k=0; k<dataSeriesDebt.length; k++){
                if(tempArray[j].name == dataSeriesDebt[k].label && (selected == 'All' || selected == dataSeriesDebt[k].label)){
                    if(tempArray[j].item.termDebt && tempArray[j].item.defaultedItem != undefined && tempArray[j].item.defaultedItem != null){
                        dataSeriesDebt[k].data.push([(offset+i), (tempArray[j].item.currentValue+tempArray[j].item.defaultedItem.currentValue)]);
                        flag = false;
                        endYear = i;
                        break;
                    } else {
                        dataSeriesDebt[k].data.push([(offset+i), tempArray[j].item.currentValue]);
                        flag = false;
                        endYear = i;
                        break;
                    }
                }
            }
            if(flag){
                if (typeof(debtList2[tempArray[j].name]) == 'undefined') {
                    debtList.push({count: 1, name:tempArray[j].name});
                    debtList2[tempArray[j].name] = 1;
                }
                if(selected == 'All' || selected == tempArray[j].name){
                    d1 = new Array();
                    if(tempArray[j].item.termDebt && tempArray[j].item.defaultedItem != undefined && tempArray[j].item.defaultedItem != null){
                        d1.push([(offset+i), (tempArray[j].item.currentValue+tempArray[j].item.defaultedItem.currentValue)]);
                    } else {
                        d1.push([(offset+i), tempArray[j].item.currentValue]);
                    }
                    dataSeriesDebt.push({data: d1, bars: {barWidth: 0.6, align:"center", show:true}, stack:true, shadowSize: 0, label: tempArray[j].name});
                    endYear = i;
                }
            }
            flag = true;
        }
    }
    if(endYear < 0){
        $("#longtermInterest").val(0);
        $("#shorttermInterest").val(0);
        $("div#debtmessagecolor").removeClass('mt-dashboardWhite-mounthsCountDebtAnalysis');
        $("div#debtmessagecolor").addClass('mt-dashboardOrange-mounthsCount');
        $("div.mt-dashboardNetWorthMonthsContainer div#debtAnalysisMsg").html("No debts to simulate");
        return;
    }
    var element=[];//simulationGraphData.profileData.debtAnalysis.debtPayed;
    var payoffDiv="";
    var flag=false;
    var decidePayoffLongTermIndex=-1;
    for(var j=0;j<element.length;j++){
        if(element[j].month!=undefined && element[j].month!=null && element[j].year!=undefined && element[j].year!=null){
            if((parseInt(loanPayOffYear)<parseInt(element[j].year)) && element[j].isTermDebt==true){
                loanPayOffYear=element[j].year;
                decidePayoffLongTermIndex=j;
            }
        }else{
            flagAllLoanPayedOnTime=false;
        }
    }

    var ccPaidYear=offset;
    var ccLastPaidName="";
    for(var i=startYear; i<diagnosis.debtAnalysis.yearlyData.length; i++){
        tempArray = diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[(diagnosis.debtAnalysis.yearlyData[i].monthlyDebts.length - 1)];
        for(var j=0; j<tempArray.length; j++){
            if(i==0){
                if(tempArray[j].item.termDebt==false && tempArray[j].item.currentValue==0.0){
                    ccLastPaidName=tempArray[j].name;   
                }
            }
            if(tempArray[j].item.currentValue==0.0 && tempArray[j].item.termDebt==false){
                ccPaidYear=(offset+i);
                ccLastPaidName=tempArray[j].name;
            }
        }
    }
    /*if(decidePayoffLongTermIndex>-1){
        payoffDiv+='<div class="mt-BudgetAnalysisAmount-headings" >'+element[decidePayoffLongTermIndex].name+' '+monthNameArray[element[decidePayoffLongTermIndex].month]+' '+element[decidePayoffLongTermIndex].year+'</div>';
        flag=true;
    }
    if(trim(ccLastPaidName)!=""){
        if(!flag){
            payoffDiv+='<div class="mt-BudgetAnalysisAmount-headings" >'+ccLastPaidName+' '+ccPaidYear+'</div>';
        }else{
            payoffDiv+='<div class="mt-BudgetAnalysisAmount-headings" style="margin-left:25px;">'+ccLastPaidName+' '+ccPaidYear+'</div>';
        }   
        
    }*/
    $("#debtsAnalysisYear").html(currentDebtsAnalysisYear);
    $("#payoffdates").html(payoffDiv);
    $("#shorttermInterest").val(parseFloat(shortTermYearlyInterest[0]).formatMoney());
    $("#longtermInterest").val(parseFloat(diagnosis.debtAnalysis.yearlyData[0].interestOnTermDebt).formatMoney());
    //alert("i=>"+i+" offset=>"+offset);
    
    for(var kh=0;kh<(1 || dataSeriesDebt.length);kh++){
        //alert("Before=>"+dataSeriesGoal[kh].data.length);
        
        
        if(dataSeriesDebt[kh].data.length<10){
            for (var j=dataSeriesDebt[kh].data.length;j<10;j++){
                var d1=new Array();
                dataSeriesDebt[kh].data.push([(offset+j), 0]);
            }
        }
        //alert("after=>"+dataSeriesGoal[kh].data.length);
        
    }
    //alert("Final=>"+dataSeriesGoal[0].data.length);
    
    $.plot($("div#graph-2"), 
            dataSeriesDebt, 
            {   yaxis: {
                    position: "right",
                    labelWidth: 30,
                    tickFormatter: function(num){
                    if (num != 0 && num % 2 == 0 )
                    {
                        if(num>1000){
                            return  currSymbol + (num/1000).toFixed(0)+"k";
                        }else if(num<-1000){
                            return  currSymbol + (num/1000).toFixed(0)+"k";
                        }else{
                            return  currSymbol + num;
                        }
                    }else
                        return "";
                    }
                },
                legend: {
                    show: false     
                },
                xaxis: {
                    show:false
                },
                grid: {
                    show: true,
                    borderWidth: 0, // in pixels
                    hoverable:true
                }
            }


    );
    $("div#graph-2").bind("plothover", function (event, pos, item) {
        if (item) {
            if (previousPoint != item.dataIndex) {
                previousPoint = item.dataIndex;
                $("#g1-tooltip").remove();
                var x = item.datapoint[0],
                y = item.datapoint[1].toFixed(1);
                
                //dataSeriesDebt[0].data.length+" "+dataSeriesDebt[0].data[0]+" "+data[x-offset]
                for(var i=0;i<dataSeriesDebt.length;i++){
                    //alert(dataSeriesDebt[i].label);
                    if(dataSeriesDebt[i].label==item.series.label){
                        var vall=dataSeriesDebt[i].data[x-offset]+"";
                        //alert(vall.split(","));
                        var arr = vall.split(",");
                        y = parseFloat(arr[1]).toFixed(1);
                        break;
                    }
                }
                //alert(dataSeriesDebt[x-offset].label+" "+dataSeriesDebt[x-offset].length);
                var y_offset = 0;
                if(y < 0)
                    y_offset = y * item.series.yaxis.scale + 5;
                var cont = '<div class=\"bubbleValues" style="height:7px">' +item.series.label + '</div>';
                cont += '<div class=\"bubbleValues" style="height:7px;padding-top:1px">' + currSymbol + parseFloat(y).formatMoney() + '</div>';
                cont += '<div style="float:left;background-color: white;">&nbsp; </div><div class=\"bubbleValues\" style=\"float:left;\"></div>';
                showTooltip(item.pageX, item.pageY, y_offset,'<div class=\'toolTipLeft\'></div>'+
                '<div class=\'toolTipCenter\'>'+
                '<div class=\'toolTipTop\'></div>'+
                '<div class=\'toolTipCont\'>'+ cont +'</div>'+
                '<div class=\'toolTipBtm\'></div>'+
                '</div>'+
                '<div class=\'toolTipRight\'></div>');
            }
        }
        else {
            //$("#g1-tooltip").remove();
            previousPoint = null;            
        }

    });
    $("div#graph-2").bind("mouseout",function(){
        //alert("mouseout!!");
        previousPoint = null;
        $("#g1-tooltip").css("display","none"); 
    });
    $("div#debtAnalysis div.graphScroller:first").find('span:first').html((offset+startYear) + " to " + (offset+endYear));
    $("div#debtAnalysis div.graphScroller:first").attr('id', index);
    $('div#debtAnalysis div.mt-debtAnalysis-dropDown').html(getDebtDropDown(debtList, selected)+'<span style="color: #ff8e0d;"></span>');
    
    ShowDebtAnalysis(selected);
}
function ShowDebtAnalysis(selected){
    var element = diagnosis.debtAnalysis;
    var messages = new Array();
    var shortTermFlag = 0, shortTermDefault = 0;
    var longTermFlag = 0, longTermDefault = 0;
    var interestAccumulated = 0;
    
    if(selected == 'All'){
        shortTermFlag = parseInt(element.shortTermFlag);
        longTermFlag = parseInt(element.longTermFlag);
        if(longTermFlag > 0){
            messages.push({type:1, message:"You are likely to default on one or more of your long term loan payments. <span onClick='showDefaultAlertTable(event, true);' style='float: none; cursor: pointer;'>(See How)</span>"});
        } else {
            messages.push({type:0, message:"Congratulations! You are likely to pay off your long term loan commitments on time."});
        }
        interestAccumulated = parseFloat(element.interestOnDebt).toFixed(2);
    
        if(shortTermFlag == 0){
            messages.push({type:0, message:"Congratulations! You are likely to meet all your short term loan commitments in the next 10 years and not incur any interest charge"});
        } else if(shortTermFlag == 1) {
            messages.push({type:0, message:"You are likely to meet the minimum payments on your short term loans and  credit cards"});
            messages.push({type:1, message:("You are likely to incur an interest charge on your short term debt payments amounting to "+ currSymbol +interestAccumulated+" in next 10 years.<span onClick='showInterestAlertTable(event);' style='float: none; cursor: pointer;'>(See How)</span>")});
        } else {
            messages.push({type:1, message:("You are likely to default on one or more of your credit cards in next 10 years. <span onClick='showDefaultAlertTable(event, false);' style='float: none; cursor: pointer;'>(See How)</span>")});
            messages.push({type:1, message:("In addition you are likely to incur an interest charge amounting to "+ currSymbol +interestAccumulated+" in next 10 years for non term debts.<span onClick='showInterestAlertTable(event);' style='float: none; cursor: pointer;'>(See How)</span>")});
        }
    } else {
        var element2, element3, element4;
        for(var i=0; i<element.yearlyData.length; i++){
            element2 = element.yearlyData[i].monthlyDebts;
            for(var j=0; j<element2.length; j++){
                element3 = element2[j];
                for(var k=0; k<element3.length; k++){
                    element4 = element3[k];
                    if(element4.name == selected){
                        if(element4.item.termDebt){
                            longTermFlag++;
                            if(element4.item.paymentDefault){
                                longTermDefault++;
                            }
                        } else {
                            shortTermFlag++;
                            if(element4.item.paymentDefault){
                                shortTermDefault++;
                            }
                            interestAccumulated += element4.item.interestAccumulated;
                        }
                    }
                }
            }
        }
        if(longTermFlag>0){
            if(longTermDefault > 0){
                messages.push({type:1, message:("You are likely to default on "+selected+" payments. <span onClick='showDefaultAlertTable(event, true);' style='float: none; cursor: pointer;'>(See How)</span>")});
            } else {
                messages.push({type:0, message:"Congratulations! You are likely to pay off your long term loan commitments on time."});
            }
        }
    
        if(shortTermFlag>0){
            if(shortTermDefault == 0 && interestAccumulated <= 0){
                messages.push({type:0, message:"Congratulations! You are likely to meet all your "+selected+" payments in the next 10 year payments and not incur any interest charge"});
            } else if(shortTermDefault == 0 && interestAccumulated > 0) {
                messages.push({type:0, message:"You are likely to meet the minimum payments on "+selected});
                messages.push({type:1, message:("You are likely to incur an interest charge on your "+selected+" payments amounting to "+ currSymbol +interestAccumulated.toFixed(2)+" in next 10 years.<span onClick='showInterestAlertTable(event);' style='float: none; cursor: pointer;'>(See How)</span>")});
            } else {
                messages.push({type:1, message:("You are likely to default on "+selected+" payments.  <span onClick='showDefaultAlertTable(event, false);' style='float: none; cursor: pointer;'>(See How)</span>")});
                messages.push({type:1, message:("In addition you are likely to incur an interest charge amounting to "+ currSymbol +interestAccumulated.toFixed(2)+" in next 10 years.<span onClick='showInterestAlertTable(event);' style='float: none; cursor: pointer;'>(See How)</span>")});
            }
        }
    }
    //alert(getCommonAlerts(messages));
    $('div#debtAnalysisMsg').html(getCommonAlerts(messages));
    //alert($('div#debtAnalysisMsg').html());
}
function showDebtAnalysisAggregate(){
    $('div#debtAnalysis div.yearItem').hide();
    $('div#debtAnalysis div.aggregateItem').show();
    showDebtGraphDiagnosis();
}

function showDebtAnalysisYearGraph(year){
    if(year == null || year == undefined){
        return;
    }
    var element = diagnosis.debtAnalysis.yearlyData[year-offset];
    
    var dataSeries = new Array();
    var d1 = new Array();
    var offset2 = element.offset;
    var flag = true;
    var tempArray;
    
    var selected = $("div#debtAnalysis select:first").val();
    if(selected == null || selected == undefined || trim(selected) == ""){
        selected = 'All';
    } else {
        selected = trim(selected);
    }
    var debtList = new Array();
    var debtList2 = new Array();
    
    for(var i=0; i<element.monthlyDebts.length; i++){
        tempArray = element.monthlyDebts[i];
        for(var j=0; j<tempArray.length; j++){
            for(var k=0; k<dataSeries.length; k++){
                if(tempArray[j].name == dataSeries[k].label && (selected == 'All' || selected == dataSeries[k].label)){
                    if(tempArray[j].item.termDebt && tempArray[j].item.defaultedItem != undefined && tempArray[j].item.defaultedItem != null){
                        dataSeries[k].data.push([(offset2+i), (tempArray[j].item.currentValue+tempArray[j].item.defaultedItem.currentValue)]);
                        flag = false;
                        break;
                    } else {
                        dataSeries[k].data.push([(offset2+i), tempArray[j].item.currentValue]);
                        flag = false;
                        break;
                    }
                }
            }
            if(flag){
                if (typeof(debtList2[tempArray[j].name]) == 'undefined') {
                    debtList.push({count: 1, name:tempArray[j].name});
                    debtList2[tempArray[j].name] = 1;
                }
                if(selected == 'All' || selected == tempArray[j].name){
                    d1 = new Array();
                    if(tempArray[j].item.termDebt && tempArray[j].item.defaultedItem != undefined && tempArray[j].item.defaultedItem != null){
                        d1.push([(offset2+i), (tempArray[j].item.currentValue+tempArray[j].item.defaultedItem.currentValue)]);
                    } else {
                        d1.push([(offset2+i), tempArray[j].item.currentValue]);
                    }
                    dataSeries.push({data: d1, bars: {barWidth: 0.6, align:"center", show:true}, stack:true, shadowSize: 0, label: tempArray[j].name});
                }
            }
            flag = true;
        }
    }
    
    $.plot($("div#debtAnalysis div.diagnosisAnalysisGraph:first"), 
        dataSeries, 
            {   yaxis: {
                    autoscaleMargin: 1,
                    labelWidth: 50,
                    tickFormatter: function(val, axis){ return (val);}
                },
                xaxis: {
                    tickDecimals: 0,
                    tickFormatter: function(val, axis){return months[val];}
                },
                grid: {
                    show: true,
                    labelMargin: 5, // in pixels
                    borderWidth: 1, // in pixels
                    borderColor: "#545454"
                }
            }
    );

    $('div#debtAnalysis div.mt-debtAnalysis-dropDown').html(getDebtDropDown(debtList, selected)+'<span style="color: #ff8e0d;">'+(year)+'</span>');
    showDebtAnalysisYearData(year, element, selected);
}
function showDebtAnalysisYearData(year, element, selected){
    $('div#debtAnalysis div.aggregateItem').hide();
    $('div#debtAnalysis div.yearItem').show();
    var item, monthData;
    var messages = new Array();
    var shortTermFlag = 0, shortTerms = 0;
    var longTermFlag = 0, longTerms = 0;
    //var interestAccumulated = parseFloat(element.interestOnDebt).toFixed(2);
    var interestAccumulated = 0;
    
    for(var i=0; i<element.monthlyDebts.length; i++){
        monthData = element.monthlyDebts[i];
        for(var j = 0; j < monthData.length; j++){  
            item = monthData[j];
            if(selected == 'All' || selected == item.name){
                if(item.item.termDebt){
                    longTerms++;
                    if(item.item.paymentDefault){
                        longTermFlag = 1;
                    }
                    if(item.item.defaultedItem != undefined && item.item.defaultedItem != null){
                        if(item.item.defaultedItem.paymentDefault){
                            shortTermFlag = 2;
                        } else if(shortTermFlag == 0 && parseFloat(item.item.defaultedItem.interestAccumulated) > 0){
                            shortTermFlag = 1;
                        }
                        interestAccumulated += item.item.defaultedItem.interestAccumulated;
                    }
                } else {
                    shortTerms++;
                    if(item.item.paymentDefault){
                        shortTermFlag = 2;
                    } else if(shortTermFlag == 0 && parseFloat(item.item.interestAccumulated) > 0){
                        shortTermFlag = 1;
                    }
                    interestAccumulated += item.item.interestAccumulated;
                }
            }
        }
    }
    interestAccumulated = interestAccumulated.toFixed(2);
    if(selected == 'All'){
        if(longTerms > 0){
            if(longTermFlag > 0){
                messages.push({type:1, message:"You are likely to default on one or more of your long term loan payments. <span onClick='showDefaultAlertTable(event, true, "+year+");' style='float: none; cursor: pointer;'>(See How)</span>"});
            } else {
                messages.push({type:0, message:"Congratulations! You are likely to pay off your long term loan commitments on time."});
            }
        }
        
        if(shortTerms > 0){
            if(shortTermFlag == 0){
                messages.push({type:0, message:"Congratulations! You are likely to meet all your short term loan commitments and not incur any interest charge"});
            } else if(shortTermFlag == 1) {
                messages.push({type:0, message:"You are likely to meet the minimum payments on your short term loans and  credit cards"});
                messages.push({type:1, message:("You are likely to incur an interest charge on your short term debt payments amounting to "+ currSymbol +interestAccumulated+" during "+year+". <span onClick='showInterestAlertTableMonthly(event, "+year+");' style='float: none; cursor: pointer;'>(See How)</span>")});
            } else {
                messages.push({type:1, message:("You are likely to default on one or more of your credit cards during year " +year+ ". <span onClick='showDefaultAlertTable(event, false, "+year+");' style='float: none; cursor: pointer;'>(See How)</span>")});
                messages.push({type:1, message:("In addition you are likely to incur an interest charge amounting to "+ currSymbol +interestAccumulated+" during "+year+". <span onClick='showInterestAlertTableMonthly(event, "+year+");' style='float: none; cursor: pointer;'>(See How)</span>")});
            }
        }
    } else {
        if(longTerms > 0){
            if(longTermFlag > 0){
                messages.push({type:1, message:("You are likely to default on "+selected+" payments. <span onClick='showDefaultAlertTable(event, true, "+year+");' style='float: none; cursor: pointer;'>(See How)</span>")});
            } else {
                messages.push({type:0, message:"Congratulations! You are likely to pay off your long term loan commitments on time."});
            }
        } else {
            if(shortTermFlag == 0){
                messages.push({type:0, message:"Congratulations! You are likely to meet all your "+selected+" payments and not incur any interest charge"});
            } else if(shortTermFlag == 1) {
                messages.push({type:0, message:"You are likely to meet the minimum payments on "+selected});
                messages.push({type:1, message:("You are likely to incur an interest charge on your "+selected+" payments amounting to "+ currSymbol +interestAccumulated+" during "+year+". <span onClick='showInterestAlertTableMonthly(event, "+year+");' style='float: none; cursor: pointer;'>(See How)</span>")});
            } else {
                messages.push({type:1, message:("You are likely to default on "+selected+" during year " +year+ ". <span onClick='showDefaultAlertTable(event, false, "+year+");' style='float: none; cursor: pointer;'>(See How)</span>")});
                messages.push({type:1, message:("In addition you are likely to incur an interest charge amounting to "+ currSymbol +interestAccumulated+" during "+year+". <span onClick='showInterestAlertTableMonthly(event, "+year+");' style='float: none; cursor: pointer;'>(See How)</span>")});
            }
        }
    }
    $('div#debtAnalysis div.diagnosisCommonAlerts').html(getCommonAlerts(messages));
}
function showDefaultAlertTableMonthly(e, termDebts, year){
    var evt = window.event || e;
    var targetElement = evt.target || evt.srcElement; 
    var data = new Array();
    var selected = $("div#debtAnalysis select:first").val();
    if(selected == null || selected == undefined || trim(selected) == ""){
        selected = 'All';
    } else {
        selected = trim(selected);
    }
    var paymentOwed, difference;
    var i = year-offset;
    var item;
    for(var j=0; j<diagnosis.debtAnalysis.yearlyData[i].monthlyDebts.length; j++){
        paymentOwed = 0;
        difference = 0;
        for(var k=0; k<diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[j].length; k++){
            item = diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[j][k];
            if((item.name == selected || selected == 'All') && item.item.termDebt == termDebts){
                if(item.item.termDebt){
                    paymentOwed += item.item.paymentDue;
                    difference += item.item.difference;
                    /*
                    if(item.item.defaultedItem != null && item.item.defaultedItem != undefined && item.item.defaultedItem.paymentDefault){
                        paymentOwed += item.item.paymentDue;
                        difference += item.item.difference;
                    }
                    */
                } else {
                    paymentOwed += item.item.paymentDue;
                    difference += item.item.difference;
                }
            }
        }
        if(difference > 0){
            data.push({scale:months[(diagnosis.debtAnalysis.yearlyData[i].offset+j)], owed: paymentOwed.toFixed(2), possible: (paymentOwed-difference).toFixed(2)});
        }
    }
    if(data.length > 0){
        $('div#debtAnalysis div.debtAlertTable').remove();
        $(targetElement).closest('div.diagnosisRedAlert').after(getDebtDefaultTable(data));
    }
}
function showDefaultAlertTable(e, termDebts){
    var evt = window.event || e;
    var targetElement = evt.target || evt.srcElement; 
    var data = new Array();
    var selected = $("div#debtAnalysis select:first").val();
    if(selected == null || selected == undefined || trim(selected) == ""){
        selected = 'All';
    } else {
        selected = trim(selected);
    }
    var paymentOwed, difference;
    var item;
    for(var i=0; i<diagnosis.debtAnalysis.yearlyData.length; i++){
        paymentOwed = 0;
        difference = 0;

        for(var j=0; j<diagnosis.debtAnalysis.yearlyData[i].monthlyDebts.length; j++){
            for(var k=0; k<diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[j].length; k++){
                item = diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[j][k];
                if((item.name == selected || selected == 'All') && item.item.termDebt == termDebts){
                    if(item.item.termDebt){
                        paymentOwed += item.item.paymentDue;
                        difference += item.item.difference;
                        /*
                        if(item.item.defaultedItem != null && item.item.defaultedItem != undefined && item.item.defaultedItem.paymentDefault){
                            paymentOwed += item.item.paymentDue;
                            difference += item.item.difference;
                        }
                        */
                    } else {
                        paymentOwed += item.item.paymentDue;
                        difference += item.item.difference;
                    }
                }
            }
        }
        if(difference > 0){
            data.push({scale:(offset+i), owed: paymentOwed.toFixed(2), possible: (paymentOwed-difference).toFixed(2)});
        }
    }
    if(data.length > 0){
        $('div#debtAnalysis div.debtAlertTable').remove();
        $(targetElement).closest('div.diagnosisRedAlert').after(getDebtDefaultTable(data));
    }
}
function showInterestAlertTableMonthly(e, year){
    var evt = window.event || e;
    var targetElement = evt.target || evt.srcElement; 
    var data = new Array();
    var selected = $("div#debtAnalysis select:first").val();
    if(selected == null || selected == undefined || trim(selected) == ""){
        selected = 'All';
    } else {
        selected = trim(selected);
    }
    var interest;
    var i = year-offset;
    var item;
    for(var j=0; j<diagnosis.debtAnalysis.yearlyData[i].monthlyDebts.length; j++){
        interest = 0;
        for(var k=0; k<diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[j].length; k++){
            item = diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[j][k];
            if(item.name == selected || selected == 'All'){
                if(item.item.termDebt && item.item.defaultedItem != null && item.item.defaultedItem != undefined){
                    interest += item.item.defaultedItem.interestAccumulated;
                } else if(!item.item.termDebt){
                    interest += item.item.interestAccumulated;
                }
            }
        }
        if(interest > 0){
            data.push({scale:months[(diagnosis.debtAnalysis.yearlyData[i].offset+j)], charge: interest.toFixed(2)});
        }
    }
    if(data.length > 0){
        $('div#debtAnalysis div.debtAlertTable').remove();
        $(targetElement).closest('div.diagnosisRedAlert').after(getDebtInterestTable(data));
    }
}
function showInterestAlertTable(e){
    var evt = window.event || e;
    var targetElement = evt.target || evt.srcElement; 
    var data = new Array();
    var selected = $("div#debtAnalysis select:first").val();
    if(selected == null || selected == undefined || trim(selected) == ""){
        selected = 'All';
    } else {
        selected = trim(selected);
    }
    var interest = 0;
    for(var i=0; i<diagnosis.debtAnalysis.yearlyData.length; i++){
        if(selected == 'All'){
            interest = parseFloat(diagnosis.debtAnalysis.yearlyData[i].interestOnDebt);
            if(interest > 0){
                data.push({scale:(offset+i), charge: interest.toFixed(2)});
            }
        } else {
            interest = 0;
            for(var j=0; j<diagnosis.debtAnalysis.yearlyData[i].monthlyDebts.length; j++){
                for(var k=0; k<diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[j].length; k++){
                    if(diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[j][k].name == selected){
                        interest += parseFloat(diagnosis.debtAnalysis.yearlyData[i].monthlyDebts[j][k].item.interestAccumulated);
                    }
                }
            }
            if(interest > 0){
                data.push({scale:(offset+i), charge: interest.toFixed(2)});
            }
        }
    }
    if(data.length > 0){
        $('div#debtAnalysis div.debtAlertTable').remove();
        $(targetElement).closest('div.diagnosisRedAlert').after(getDebtInterestTable(data));
    }
}
function getDebtDefaultTable(data){
    var htmlStringBuffer ="";
    htmlStringBuffer+='<div class="debtAlertTable"><div style="color: #FFFFFF;" class="diagnosisTable diagnosisTableHeader"><span style="width: 100px;">Year</span>';
    htmlStringBuffer+='<span style="width: 150px;">Payment Owed</span><span style="width: 150px;">Payment Possible</span></div>';
                    
    for(var i=0; i<data.length; i++){
        item = data[i];
        if(1%2 == 0){
            htmlStringBuffer+='<div class="diagnosisTable"><span style="width: 100px;">';
        } else {
            htmlStringBuffer+='<div class="diagnosisTable diagnosisTabletAlt"><span style="width: 100px;">';
        }
        htmlStringBuffer+=(item.scale) + '</span><span style="width: 150px;">'+item.owed+'</span><span style="width: 150px;">'+item.possible+'</span></div>';
    }
    htmlStringBuffer.append("</div>");
    return htmlStringBuffer;
}
function getDebtInterestTable(data){
    var htmlStringBuffer = "";
    htmlStringBuffer+='<div class="debtAlertTable"><div style="color: #FFFFFF;" class="diagnosisTable diagnosisTableHeader"><span style="width: 200px;">Year</span>';
    htmlStringBuffer+='<span style="width: 200px;">Interest Charge</span></div>';
                    
    for(var i=0; i<data.length; i++){
        item = data[i];
        if(1%2 == 0){
            htmlStringBuffer+='<div class="diagnosisTable"><span style="width: 200px;">';
        } else {
            htmlStringBuffer+='<div class="diagnosisTable diagnosisTabletAlt"><span style="width: 200px;">';
        }
        htmlStringBuffer+=(item.scale) + '</span><span style="width: 100px;">'+item.charge+'</span></div>';
    }
    htmlStringBuffer+="</div>";
    return htmlStringBuffer;
}
function getDebtDropDown(data, selected){
    if(selected == null || selected == undefined || selected == ""){
        selected = 'All';
    }
    var htmlStringBuffer = "";
    htmlStringBuffer+='<select style="float: right;" class="medium" name="debtsList" onchange="filterDebtAnalysis(event);">';
    if(selected == 'All'){
        htmlStringBuffer+='<option value="All" selected>All</option>';
    } else {
        htmlStringBuffer+='<option value="All">All</option>';
    }
    for(var i=0; i< data.length; i++){
        if(data[i].count > 0){
            if(selected == data[i].name){
                htmlStringBuffer+='<option value="'+data[i].name+'" selected>'+data[i].name+'</option>';
            } else {
                htmlStringBuffer+='<option value="'+data[i].name+'">'+data[i].name+'</option>';
            }
        }
    }
    htmlStringBuffer+='</select>';
    return htmlStringBuffer;
}
function filterDebtAnalysis(){
    var year = trim($('div#debtAnalysis div.item-box-heading:first').find('span:first').html());
    
    if(year != null && year != undefined && trim(year) != "" && !isNaN(year)){
        year = parseInt(year);
        showDebtAnalysisYearGraph(year);
    } else {
        showDebtGraphDiagnosis();
    }
}
function getCommonAlerts(messages){
    if(messages == null || messages == undefined){
        return "";
    }
    var htmlStringBuffer = "";
    for(var i=0; i<messages.length; i++){
        if(messages[i].type == 0){
           htmlStringBuffer+='<div class="diagnosisGreenAlert"><span style="margin-right: 3px;color:#499B4F">&#10004;</span><span style="width: 400px;color:#299B00">'+messages[i].message+'</span></div>';
        } else if(messages[i].type == 1){
            htmlStringBuffer+='<div class="diagnosisRedAlert"><span style="margin-right: 3px;">X</span><span style="width: 400px;">'+messages[i].message+'</span></div>';
        } else if(messages[i].type == 2){
            htmlStringBuffer+='<div class="diagnosisOrangeAlert"><span></span><span>'+messages[i].message+'</span></div>';
        }
    }
    return htmlStringBuffer;
}


function displayBudgetAnalysis(decide){
    if(decide=='prev'){
        currentDisplayBudgetYear--;
        if(currentDisplayBudgetYear==offset){
            $("#budgetAnalysisYear").html(currentDisplayBudgetYear);
            var budgetItem = diagnosis.budgetAnalysis.yearlyData[0];
            if((budgetItem.beginBalance + budgetItem.cashIn - budgetItem.cashOut) > 0){
                $("#budgetAnalysisExpensesCut").val((parseInt((0.1*(budgetItem.mustHaveExp+budgetItem.desiredExp)))+parseInt(beginBalArray[0][1])).formatMoney()); 
                $("#budgetAnalysisSaving").val(parseInt(beginBalArray[0][1]).formatMoney());
                //$("#budgetAnalysisMsg").html('Your total savings at the end of the year '+currentDisplayBudgetYear+' can be '+ currSymbol +(parseInt((0.1*(budgetItem.mustHaveExp+budgetItem.desiredExp)))+parseInt(savingsArray[0]))+'. if you cut down your expenses for the year by 10%');
            } else {
                $("#budgetAnalysisExpensesCut").val('0'); 
                $("#budgetAnalysisSaving").val('0');
                //$("#budgetAnalysisMsg").html('You will have a net negative balance at the end of the year '+currentDisplayBudgetYear+' if you take care of all your expenses, and debt commitments . This means you are likely to go in further debt by ' + currSymbol + ((budgetItem.cashOut-(budgetItem.beginBalance + budgetItem.cashIn)).toFixed(2)));
            }
            var beginBal=parseFloat(budgetItem.beginBalance);
            var increaseWithCut=parseInt((0.1*(budgetItem.mustHaveExp+budgetItem.desiredExp)));
            var newBal=beginBal+increaseWithCut;
            var percent=parseFloat((increaseWithCut/beginBal)*100).toFixed(2);
            /*if(percent>0){
                $("div#budgetAnalysisBackgroundDiv").removeClass('mt-dashboardOrange-mounthsCount');
                $("div#budgetAnalysisBackgroundDiv").addClass('mt-dashboardGreen-mounthsCountNetWorth');
            }else{*/
                $("div#budgetAnalysisBackgroundDiv").removeClass('mt-dashboardGreen-mounthsCountNetWorth');
                $("div#budgetAnalysisBackgroundDiv").addClass('mt-dashboardOrange-mounthsCount');
            //}
                showBudgetAnalysis(currentDisplayBudgetYear);   
            //$("#budgetAnalysisMsg").html("Your year end saving for "+offset+" is "+ currSymbol +beginBal.formatMoney());
            //$("#budgetAnalysisMsg").html('Your beginning balance by the end of '+currentDisplayBudgetYear+' will increase by '+percent+'% ('+ currSymbol +(increaseWithCut.formatMoney())+') if you reduce your yearly expenses by 10%');
        }else if(currentDisplayBudgetYear>offset){
            $("#budgetAnalysisYear").html(currentDisplayBudgetYear);
            var budgetItem = diagnosis.budgetAnalysis.yearlyData[(currentDisplayBudgetYear-offset)+1];
            var budgetItemStart = diagnosis.budgetAnalysis.yearlyData[currentDisplayBudgetYear-offset];
            if((budgetItem.beginBalance + budgetItem.cashIn - budgetItem.cashOut) > 0){
                $("#budgetAnalysisExpensesCut").val((parseInt((0.1*(budgetItem.mustHaveExp+budgetItem.desiredExp)))+parseInt(beginBalArray[currentDisplayBudgetYear-offset][1])).formatMoney()); 
                $("#budgetAnalysisSaving").val(parseInt(beginBalArray[currentDisplayBudgetYear-offset][1]).formatMoney());
            } else {
                $("#budgetAnalysisExpensesCut").val('0'); 
                $("#budgetAnalysisSaving").val('0');
            }
            if(budgetItem.beginBalance>=budgetItemStart.beginBalance){
                var increase=parseFloat(budgetItem.beginBalance)-parseFloat(budgetItemStart.beginBalance);
                var divingFactor;
                var increaseFactor;
                if(increase<=0)
                    increaseFactor=1;
                else
                    increaseFactor=increase;
                
                if(budgetItemStart.beginBalance<=0)
                    divingFactor=1;
                else
                    divingFactor=budgetItemStart.beginBalance
                    
                var increasePercent=parseFloat((increaseFactor/divingFactor)*100).toFixed(2);
                $("div#budgetAnalysisBackgroundDiv").removeClass('mt-dashboardOrange-mounthsCount');
                $("div#budgetAnalysisBackgroundDiv").addClass('mt-dashboardGreen-mounthsCountNetWorth');
                $("#budgetAnalysisMsg").html('Between '+currentDisplayBudgetYear +' and '+(currentDisplayBudgetYear-1)+', your year end saving is increasing by '+ currSymbol +(increase).toFixed(0)+' (from '+ currSymbol +(budgetItemStart.beginBalance).toFixed(0)+' to '+ currSymbol +(budgetItem.beginBalance).toFixed(0)+'). This is a '+increasePercent+'% increase');
                //$("#budgetAnalysisMsg").html('By the end '+currentDisplayBudgetYear+', your beginning balance is increasing by '+ currSymbol +parseFloat(increase).formatMoney()+' ('+increasePercent+'%)');
            }else{
                var decrease=parseFloat(budgetItemStart.beginBalance)-parseFloat(budgetItem.beginBalance);
                var divingFactor;
                var decreaseFactor;
                if(decrease<=0)
                    decreaseFactor=1;
                else
                    decreaseFactor=decrease;
                
                if(budgetItemStart.beginBalance<=0)
                    divingFactor=1;
                else
                    divingFactor=budgetItemStart.beginBalance
                    
                var decreasePercent=parseFloat((decreaseFactor/divingFactor)*100).toFixed(2);
                $("div#budgetAnalysisBackgroundDiv").removeClass('mt-dashboardGreen-mounthsCountNetWorth');
                $("div#budgetAnalysisBackgroundDiv").addClass('mt-dashboardOrange-mounthsCount');
                $("#budgetAnalysisMsg").html('Between '+currentDisplayBudgetYear +' and '+(currentDisplayBudgetYear-1)+', your year end saving is reducing by '+ currSymbol +(decrease).toFixed(0)+' (from '+ currSymbol +(budgetItemStart.beginBalance).toFixed(0)+' to '+ currSymbol +(budgetItem.beginBalance).toFixed(0)+'). This is a '+decreasePercent+'% reduction');
                //$("#budgetAnalysisMsg").html('By the end of '+currentDisplayBudgetYear+', your beginning balance is reducing by '+ currSymbol +parseFloat(decrease).formatMoney()+' ('+decreasePercent+'%)');
            }
            showBudgetAnalysis(currentDisplayBudgetYear);
        }else{
            alert("Sorry can not display previous year data");
            currentDisplayBudgetYear++;
        }   
    }else if(decide=='next'){
        currentDisplayBudgetYear++;
        if(currentDisplayBudgetYear<=(offset+9)){
            $("#budgetAnalysisYear").html(currentDisplayBudgetYear);


            //alert("Index=>"+(currentDisplayBudgetYear-offset));
            var budgetItem = diagnosis.budgetAnalysis.yearlyData[(currentDisplayBudgetYear-offset)+1];
            var budgetItemStart = diagnosis.budgetAnalysis.yearlyData[currentDisplayBudgetYear-offset];
            if((budgetItem.beginBalance + budgetItem.cashIn - budgetItem.cashOut) > 0){
                //alert("Expense =>"+(budgetItem.mustHaveExp+budgetItem.desiredExp));
                $("#budgetAnalysisExpensesCut").val((parseInt((0.1*(budgetItem.mustHaveExp+budgetItem.desiredExp)))+parseInt(beginBalArray[currentDisplayBudgetYear-offset][1])).formatMoney()); 
                $("#budgetAnalysisSaving").val(parseInt(beginBalArray[currentDisplayBudgetYear-offset][1]).formatMoney());
            } else {
                $("#budgetAnalysisExpensesCut").val('0'); 
                $("#budgetAnalysisSaving").val('0');
            }
            if(budgetItem.beginBalance>=budgetItemStart.beginBalance){
                var increase=parseFloat(budgetItem.beginBalance)-parseFloat(budgetItemStart.beginBalance);
                var divingFactor;
                var increaseFactor;
                if(increase<=0)
                    increaseFactor=1;
                else
                    increaseFactor=increase;
                
                if(budgetItemStart.beginBalance<=0)
                    divingFactor=1;
                else
                    divingFactor=budgetItemStart.beginBalance
                    
                var increasePercent=parseFloat((increaseFactor/divingFactor)*100).toFixed(2);
                $("div#budgetAnalysisBackgroundDiv").removeClass('mt-dashboardOrange-mounthsCount');
                $("div#budgetAnalysisBackgroundDiv").addClass('mt-dashboardGreen-mounthsCountNetWorth');
                $("#budgetAnalysisMsg").html('Between '+currentDisplayBudgetYear +' and '+(currentDisplayBudgetYear-1)+', your year end saving is increasing by '+ currSymbol +(increase).toFixed(0)+' (from '+ currSymbol +(budgetItemStart.beginBalance).toFixed(0)+' to '+ currSymbol +(budgetItem.beginBalance).toFixed(0)+'). This is a '+increasePercent+'% increase');
                //$("#budgetAnalysisMsg").html('By the end of '+currentDisplayBudgetYear+', your beginning balance is increasing by '+ currSymbol +parseFloat(increase).formatMoney()+' ('+increasePercent+'%)');
            }else{
                var decrease=parseFloat(budgetItemStart.beginBalance)-parseFloat(budgetItem.beginBalance);
                var divingFactor;
                var decreaseFactor;
                if(decrease<=0)
                    decreaseFactor=1;
                else
                    decreaseFactor=decrease;
                
                if(budgetItemStart.beginBalance<=0)
                    divingFactor=1;
                else
                    divingFactor=budgetItemStart.beginBalance
                    
                var decreasePercent=parseFloat((decreaseFactor/divingFactor)*100).toFixed(2);
                $("div#budgetAnalysisBackgroundDiv").removeClass('mt-dashboardGreen-mounthsCountNetWorth');
                $("div#budgetAnalysisBackgroundDiv").addClass('mt-dashboardOrange-mounthsCount');
                $("#budgetAnalysisMsg").html('Between '+currentDisplayBudgetYear +' and '+(currentDisplayBudgetYear-1)+', your year end saving is reducing by '+ currSymbol +(decrease).toFixed(0)+' (from '+ currSymbol +(budgetItemStart.beginBalance).toFixed(0)+' to '+ currSymbol +(budgetItem.beginBalance).toFixed(0)+'). This is a '+decreasePercent+'% reduction');
                //$("#budgetAnalysisMsg").html('By the end of '+currentDisplayBudgetYear+', your beginning balance is reducing by '+ currSymbol +parseFloat(decrease).formatMoney()+' ('+decreasePercent+'%)');
            }
            showBudgetAnalysis(currentDisplayBudgetYear);
        }else{
            alert("Sorry can not display next year data");
            currentDisplayBudgetYear--;
        }
    }
}


function showYearlyInterest(decide){
    if(decide=='prev'){
        currentDebtsAnalysisYear--;
        if(currentDebtsAnalysisYear>=offset){
            $("#debtsAnalysisYear").html(currentDebtsAnalysisYear);
            $("#longtermInterest").val(parseFloat(diagnosis.debtAnalysis.yearlyData[currentDebtsAnalysisYear-offset].interestOnTermDebt).formatMoney());
            $("#shorttermInterest").val(parseFloat(shortTermYearlyInterest[currentDebtsAnalysisYear-offset]).formatMoney());    
        }else{
            alert("Sorry can not display previous year data");
            currentDebtsAnalysisYear++;
        }   
    }else if(decide=='next'){
        currentDebtsAnalysisYear++;
        if(currentDebtsAnalysisYear<=(offset+9)){
            $("#debtsAnalysisYear").html(currentDebtsAnalysisYear);
            $("#longtermInterest").val(parseFloat(diagnosis.debtAnalysis.yearlyData[currentDebtsAnalysisYear-offset].interestOnTermDebt).formatMoney());
            $("#shorttermInterest").val(parseFloat(shortTermYearlyInterest[currentDebtsAnalysisYear-offset]).formatMoney());
        }else{
            alert("Sorry can not display next year data");
            currentDebtsAnalysisYear--;
        }
    }
}
 
</script>

<div id="forecastdisplay">
<div id="diagnosisJSONData" class="successview" style="display:none">{!getData}</div>
<apex:outputPanel rendered="{!showClientLookup}">
    <!--<c:Client_Lookup_New pgHeader="" ClientName="{!if(ClientConfiguration!=null, ClientConfiguration.Client__r.Name,'')}" ClientId="{!if(ClientConfiguration!=null, ClientConfiguration.Client__r.Id,'')}"/> -->
</apex:outputPanel>
<div style="background: #F0F0F0; margin: 10px auto 0">
<div class="tabsConainer">

<apex:outputPanel rendered="{!if(clientId != null && clientId != '', true, false)}">
<div class="tabs">
        <div id="tab1" class="tabE">
            <div class="yourFinancialHealth">
                <div class="mt-dashboardTopHeadingHeader"> <span class="mt-dashboard-heading2" style="width:190px">Your Financial Health</span>
                    <span class="mt-dahsboardWhatIsThis" style="padding-top:19px"> 
                        <a href="#?w=842" rel="popup_name" class="poplight" style="text-decoration:underline;float:left;margin-top:2px;">Help</a>
                    </span> 
                </div>
                <div class="mt-your-financialContainer">
                  <div class="mt-your-financial-healthGraph">
                    <div id="chart_div" style="float: left; height: 190px; width: 725px; position: relative; margin-top: -17px; margin-left: 10px; padding: 0px;"></div>
                    <div class="mt-color-slider-bar">
                      <div class="mt-white-slider" id="scoreSlider" style="margin-top:0;"><span class="mt-white-slider-text" id="yearTafiScore"></span></div>
                    </div>
                    <span class="mt-greenBottomBorder"></span>
                    <div id="tafiyeardisplaydiv"></div>
                    <span class="mt-score-heading">Score</span> 
                    
                    <!-- New starting from here -->
                    <div class="mt-year-ending" style="height:42px;">
                      <div class="mt-dashboard-year-endings" style="margin-top:15px !important;height:42px;">
                        <div style="width:100%;float:left">
                          <div class="mt-year-ending-button" style="width:90px;float:left">
                          <span class="mt-year-ending-button-text">
                                <a onClick="displayScore('prev')">
                                    <img border="0" style="padding-right: 3px;" src="{!URLFOR($Resource.Finacast_Chart_Images, 'sfdc-images/arrow-left.png')}" alt="" />
                                </a> 
                                <span id="tafiScoreDisplayYear"></span> 
                                <a onClick="displayScore('next')">
                                    <img border="0" style="padding-left: 3px;" src="{!URLFOR($Resource.Finacast_Chart_Images, 'sfdc-images/arrow-right.png')}" alt="" />
                                </a>
                            </span>
                          </div>
                          <div class="mt-below-headings" style="float:left;">(Select a year to view that years forecast)</div>
                        </div>
                      </div>
                    </div>
                    <div class="mt-year-ending" style="height:62px;">
                      <div class="mt-dashboard-year-endings" style="margin-top:15px !important;">
                        <div class="mt-HouseholdExpenses">
                          <div class="mt-light-red" id="hhr"></div>
                          <div class="mt-light-orange" id="hho"></div>
                          <div class="mt-dark-green" id="hhg"></div>
                          <div class="mt-below-headings">Household Expenses</div>
                        </div>
                        <div class="mt-HouseholdExpenses">
                          <div class="mt-light-red" id="ccr"></div>
                          <div class="mt-dark-orange" id="cco"></div>
                          <div class="mt-light-green" id="ccg"></div>
                          <div class="mt-below-headings">Credit Card Payments</div>
                        </div>
                        <div class="mt-HouseholdExpenses">
                          <div class="mt-dark-red" id="lor"></div>
                          <div class="mt-light-orange" id="loo"></div>
                          <div class="mt-light-green" id="log"></div>
                          <div class="mt-below-headings">Loan Payments</div>
                        </div>
                        <div class="mt-HouseholdExpenses">
                          <div class="mt-light-red" id="gor"></div>
                          <div class="mt-light-orange" id="goo"></div>
                          <div class="mt-dark-green" id="gog"></div>
                          <div class="mt-below-headings">Goal Commitments</div>
                        </div>
                      </div>
                    </div>
                    <!-- New Ending here -->
                    
                    <div class="mt-dashboardWhite-mounthsCountDebtAnalysis" id="tafiscorebackgounddiv" style="margin-top:30px !important;">
                      <div class="mt-dashboardMonthsContainer">
                        <div class="mt-dashboardMonthsWhiteText" id="tafimessages"> </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
        </div>
        
        <div id="tab2" class="tabE">
            <div id="debtAnalysis" class="debtAnalysis" style="float:left;margin-top:40px;margin-left:2px">
                  <div class="mt-dashboardTopHeadingHeader">
                    <div class="mt-dashboard-heading2" style="width:125px;float:left">Debt Forecast</div>
                    <div class="mt-dahsboardWhatIsThis" style="padding-top:19px;"> <a href="#?w=842" rel="popup_name2" class="poplight" style="text-decoration:underline;float:left;margin-top:2px;">Help</a> </div>
                    <div id="debtsdropdown" class="mt-debtAnalysis-dropDown" style="padding-top:23px;padding-right:10px;float:right"></div>
                  </div>
                  <div class="mt-your-NetWorthContainer">
                    <div class="mt-DebtAnalysisSubHeading"> </div>
                    <div class="mt-your-NetWorthGraph">
                      <div id="graph-2" class="debtAnalysisBar" style="width:760px; height:180px!important;margin-left:14px;margin-bottom: 0px;margin-top:13px; float:left;"> </div>
                      <span class="mt-NetWorthGreenBottomBorder"></span>
                      <div id="debtanalysisdisplayyeardiagnosis"></div>
                      <div class="mt-Net_worthYear-ending">
                        <div class="mt-dashboard-debtAnalysisYear-endings">
                          <div class="mt-HouseholdExpenses">
                            <span class="smallTextBlue">Interest Paid in</span>
                            <div class="mt-year-ending-button"> <span class="mt-year-ending-button-text"><a href="javascript:void(0)" onClick="showYearlyInterest('prev');"><img src="{!URLFOR($Resource.Finacast_Chart_Images, 'sfdc-images/arrow-left.png')}" border="0" style="padding-right:3px;" /></a> <span id="debtsAnalysisYear"></span> <a href="javascript:void(0)" onClick="showYearlyInterest('next');"><img src="{!URLFOR($Resource.Finacast_Chart_Images, 'sfdc-images/arrow-right.png')}" border="0" style="padding-right:3px;" /></a></span></div>
                            <!-- div class="mt-DebtAnalysisbelow-headings" style="width:80px;">Pay Off Dates <a href="#"><img src="http://finacast.com/images/grey-arrow.png" border="0" /></a></div> --> 
                          </div>
                          <div class="mt-HouseholdExpenses">
                                <span class="smallTextBlue">Long Term Loans</span>
                                <div class="mt-dashboardNetWorthMonthsWhiteTextBox">
                                  <input type="text" name="amount1" class="mt-dashboardNetWorthMonthsWhiteTextBox2-grey" id="longtermInterest" readonly="true" />
                                </div>
                            </div>
                            <div class="mt-HouseholdExpenses">
                            <span class="smallTextBlue">Short Term Loans</span>
                            <div class="mt-dashboardNetWorthMonthsWhiteTextBox">
                              <input type="text" name="amount" class="mt-dashboardNetWorthMonthsWhiteTextBox2" id="shorttermInterest" readonly="true" />
                            </div>
                          </div>
                          <div style="float:left; width:280px;" id="payoffdates"></div>
                        </div>
                      </div>
                      <div class="mt-dashboardWhite-mounthsCountDebtAnalysis" id="debtmessagecolor">
                        <div class="mt-dashboardNetWorthMonthsContainer">
                          <div class="mt-dashboardMonthsWhiteText" id="debtAnalysisMsg"></div>
                        </div>
                      </div>
                    </div>
                </div>
        </div>
        </div>
        
        <div id="tab3" class="tabE">
            <div class="budgetAnalysis" style="margin-top:0px">
                <div class="mt-dashboardTopHeadingHeaderNetWorth"> <span class="mt-dashboard-heading2">Networth Forecast</span><span class="mt-dahsboardWhatIsThis" style="padding-top:19px"> <a href="#?w=842" rel="popup_name3" class="poplight" style="text-decoration:underline;float:left;margin-top:2px;">Help</a> </span> </div>
                <div class="mt-your-NetWorthContainer">
                  <div class="mt-your-NetWorthContainer">
                    <div class="mt-your-NetWorthGraph">
                      <div id="scenarioNetWorth" style="height: 200px; width: 750px; margin-left:10px;"></div>
                      <div class="mt-year-heading" id="networthyeardisplayscenarioCom" style="margin-left:5px;"></div>
                      <div class="mt-Net_worthYear-ending">
                        <div class="mt-dashboard-NetWorthYear-endings">
                          <div class="mt-HouseholdExpenses">
                            <div class="mt-NetWorthAmount-headings">Year Ending</div>
                            <div class="mt-year-ending-button">
                            <span class="mt-year-ending-button-text"><a onClick="displayNetworth('prev')"><img
                    border="0" style="padding-right: 3px;" src="{!URLFOR($Resource.Finacast_Chart_Images, 'sfdc-images/arrow-left.png')}"
                                                                                                               alt=""/></a> <span id="networthAnalysisYear"></span> <a onClick="displayNetworth('next')"><img border="0"
                                                                                                                        style="padding-left: 3px;" src="{!URLFOR($Resource.Finacast_Chart_Images, 'sfdc-images/arrow-right.png')}" alt=""/></a></span></div>
                          </div>
                          <div class="mt-HouseholdExpenses">
                                <div class="mt-NetWorthAmount-headings">Total Savings ($)</div>
                                <div class="mt-dashboardNetWorthMonthsWhiteTextBox">
                                  <input type="text" class="mt-dashboardNetWorthMonthsWhiteTextBox2-grey" name="amount" id="networthscenarioSavingAmt"/>
                                </div>
                          </div>
                          <div class="mt-HouseholdExpenses">
                                <div class="mt-NetWorthAmount-headings">Total Debt ($)</div>
                                <div class="mt-dashboardNetWorthMonthsWhiteTextBox">
                                    <input type="text" class="mt-dashboardNetWorthMonthsWhiteTextBox2" name="amount" id="networthscenarioDebtAmt"/>
                                </div>
                          </div>
                          <div class="mt-HouseholdExpenses">
                            <div class="mt-NetWorthAmount-headings">Networth ($)</div>
                            <div class="mt-dashboardNetWorthMonthsWhiteTextBox">
                              <input type="text" class="mt-dashboardNetWorthMonthsWhiteTextBox2" name="amount" id="networthscenarioAmt"/>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="mt-dashboardWhite-mounthsCountDebtAnalysis">
                        <div class="mt-dashboardNetWorthMonthsContainer"  style="margin-top:10px !important; margin-left: 15px;">
                          <div class="mt-dashboardNetWorthMonthsWhiteText" id="networthscenariomsg"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                </div>
        </div>
        
        <div id="tab4" class="tabE">
            <div id="goalAnalysisDisplay" class="debtAnalysis" style="float:left;margin-top:40px;margin-left:2px">
                <div class="mt-dashboardTopHeadingHeader">
                  <div class="mt-dashboard-heading2" style="width:125px">Goal Forecast</div>
                  <div class="mt-dahsboardWhatIsThis" style="margin-top:-10px"> <a href="#?w=842" rel="popup_name4" class="poplight" style="text-decoration:underline;float:left;padding-top:16px;">Help</a> </div>
                </div>
                <div class="mt-your-NetWorthContainer">
                  <div class="mt-DebtAnalysisSubHeading"> </div>
                  <div class="mt-your-NetWorthGraph">
                    <div id="graph-4" class="debtAnalysisBar" style="position:relative; width:780px; height:285px!important;margin-left:14px;margin-bottom: 0px;margin-top:13px"> </div>
                    <div id="goaldisplayyeardiagnosis" style="margin-top:1px"></div>
                    <div class="mt-dashboardWhite-mounthsCountDebtAnalysis" id="goalmessagecolor" style="margin-top:9px !important">
                      <div class="mt-dashboardNetWorthMonthsContainer">
                        <div class="mt-dashboardMonthsWhiteText" id="gaolsAnalysisMsg"></div>
                      </div>
                    </div>
                  </div>
                </div>
        </div>
</div>
        <ul class="tabmenu">
            <li><a href="#tab1"><span class="arrow"></span>Your </a></li>
            <li><a href="#tab2"><span class="arrow"></span>Debt Forecast</a></li>
            <li><a href="#tab3"><span class="arrow"></span>Networth Forecast</a></li>
            <li><a href="#tab4"><span class="arrow"></span>Goal Forecast</a></li>
        </ul>
</div>
</apex:outputPanel>
</div></div>
</div>

<!--popUp-->
<div id="popup_name" class="popup_block">
    <div class="popupHeaderTitle">Your financial health</div>
    <div class="mt-right-side-box">
        <div class="popupText">
            <p> Your financial score is an indicator of how likely you are to meet your current financial commitments like: </p>
            <ul>
              <li>Your expenses for the next month</li>
              <li>Your immediate credit card dues</li>
              <li>Your immediate loan payments</li>
              <li>Immediate savings needed for your financial goals</li>
            </ul>
            <p>The score is graded between 0 and 10, depending on your likelihood of meeting the above financial commitments. In addition, this score also takes into account the number of months that you can survive without an income. </p>
            <p> The green, orange and red color indicators for each of the sections tells you if your expenses, loans and credit card payments are likely to be met fully or partially in the next month. </p>
            <p><b> Score Key</b> </p>
            <table class="popupTableText" border="0" cellpadding="0" cellspacing="0">
              <tbody>
                <tr>
                  <td>Below 1 </td>
                  <td>You are unlikely to meet your everyday expenses in the next month </td>
                </tr>
                <tr>
                  <td>Between 1 and 4 </td>
                  <td>You are likely to meet your everyday expenses but not meet your debt commitments </td>
                </tr>
                <tr>
                  <td>Between 4 and 5 </td>
                  <td>You will meet your expenses, and debt commitments but may not have enough to save for other financial goals </td>
                </tr>
                <tr>
                  <td>Above 5 </td>
                  <td>You will meet your immediate expenses, debt commitments and save for other goals. You are also likely to have enough to live for a few days without an income </td>
                </tr>
              </tbody>
            </table>
        </div>
    </div>
</div>

<div id="popup_name2" class="popup_block">
    <div class="popupHeaderTitle">Debt Forecast</div>
    <div class="mt-right-side-box">
        <div class="popupText">
            <p>Finacast simulates your future cash flows based on your budget items. It allocates the cash needed to take care of your expenses and debts from the future income and savings. </p>
            <ul>
              <li>For unpaid credit card debts, Finacast takes the interest charged into account. </li>
              <li>When the monthly payment for a loan is not paid in full, Finacast puts the gap in an unplanned debt bucket with an interest rate of 18% per annum.</li>
              <li>You can view the interest paid in different years by selecting the year through the year button. </li>
              <li>You get specific call outs for debts if you are not able to meet your debt obligations in next 10 years.</li>
              <li>You can select a specific debt from the drop down to view the details just for that debt.</li>
            </ul> 
        </div>
    </div>
</div>

<div id="popup_name3" class="popup_block">
    <div class="popupHeaderTitle">Networth Forecast</div>
    <div class="mt-right-side-box">
        <div class="popupText">
            <p> Your networth is the difference between what you have saved (your assets) and what you owe (your liabilities).

A negative networth indicates that you owe more than what you have saved and a positive net worth indicates you owe less than what you have saved.

If your net worth increases with time then it bodes well for your financial future. </p>
            
        </div>
    </div>
</div>

<div id="popup_name4" class="popup_block">
    <div class="popupHeaderTitle">Goal Forecast</div>
    <div class="mt-right-side-box">
        <div class="popupText">
            <p>Finacast simulates your future cash flows based on your budget items. It allocates the cash needed to take care of your expenses and debts from the future income and savings, and puts the remaining amount towards the goals.</p>
            <ul>
              <li>Goals with the higher priorities get the money allocated first. So for instance, if you are not able to put aside money for all goals, the higher priority goals will get money put aside first.</li>
              <li>Goals can share the savings accounts. While computing the current goal value, the higher priority goals get the money allocated first from the savings.</li>
              <li>If there is a budget short fall in future, the money saved for the goal is used to take care of debts and expenses. When the money is withdrawal from retirement accounts that provide tax differed savings Finacast puts away the money for tax penalty (10%) and taxes (30%).</li>
              <li>Once a goal is met, Finacast does not allocate any money towards it.</li>
            </ul> 
        </div>
    </div>
</div>
<!--PopUp End-->


<script>
$(document).ready(function(){
    //alert('calling initialize');
    initializeDiagnosis();
});
</script>
</apex:form>
</apex:page>